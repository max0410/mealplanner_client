[{"C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\index.js":"1","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\AccountManager.js":"2","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\MealSelector.js":"3","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Calendar.js":"4","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Meal.js":"5","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\ShoppingList.js":"6","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\NutritionInfo.js":"7","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Export.js":"8","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\LoadingScreen.js":"9","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Warning.js":"10","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\ImportRecipe.js":"11","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\CalendarRules.js":"12"},{"size":14616,"mtime":1616541656007,"results":"13","hashOfConfig":"14"},{"size":8359,"mtime":1616165828018,"results":"15","hashOfConfig":"14"},{"size":42040,"mtime":1616261159672,"results":"16","hashOfConfig":"14"},{"size":49868,"mtime":1616548403005,"results":"17","hashOfConfig":"14"},{"size":1842,"mtime":1616006325955,"results":"18","hashOfConfig":"14"},{"size":18198,"mtime":1616257726479,"results":"19","hashOfConfig":"14"},{"size":7398,"mtime":1615992209905,"results":"20","hashOfConfig":"14"},{"size":9107,"mtime":1616538278009,"results":"21","hashOfConfig":"14"},{"size":2963,"mtime":1616116787249,"results":"22","hashOfConfig":"14"},{"size":4109,"mtime":1615993549385,"results":"23","hashOfConfig":"14"},{"size":12462,"mtime":1616185293580,"results":"24","hashOfConfig":"14"},{"size":30979,"mtime":1616549728756,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"1eez3f3",{"filePath":"30","messages":"31","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":72,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"29"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"29"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"29"},"C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\index.js",["64","65","66","67","68","69"],"/* \r\nThis is the main application program, it contains all parts of the app except the homepage, it is responsible for:\r\n1. Communicating with the server to establish a shared key\r\n2. Coordinating loading\r\n3. Rendering all the components and fostering communication between them\r\n*/\r\n\r\n// Importing React framework\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Importing Components\r\nimport AccountManager from './Components/AccountManager'\r\nimport Calendar from './Components/Calendar'\r\nimport MealSelector from './Components/MealSelector'\r\nimport ShoppingList from './Components/ShoppingList'\r\nimport NutritionInfo from './Components/NutritionInfo'\r\nimport Export from './Components/Export'\r\nimport LoadingScreen from './Components/LoadingScreen'\r\nimport Warning from './Components/Warning'\r\nimport ImportRecipe from './Components/ImportRecipe'\r\nimport CalendarRules from './Components/CalendarRules'\r\n\r\n// Importing css for style\r\nimport './index.css';\r\n\r\n// Import jquery for sending post requests to host\r\nimport $ from \"jquery\"\r\n\r\nvar mathjs = require('mathjs')\r\nvar domain = \"http://127.0.0.1:3000\"\r\n\r\n// Helper function to set browser cookies\r\nfunction setCookie(cname, cvalue, exdays) {\r\n  var d = new Date();\r\n  d.setTime(d.getTime() + (exdays*24*60*60*1000));\r\n  var expires = \"expires=\"+ d.toUTCString();\r\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n}\r\n\r\n// Helper function to get browser cookies\r\nfunction getCookie(cname) {\r\n  var name = cname + \"=\";\r\n  var decodedCookie = decodeURIComponent(document.cookie);\r\n  var ca = decodedCookie.split(';');\r\n  for(var i = 0; i <ca.length; i++) {\r\n    var c = ca[i];\r\n    while (c.charAt(0) == ' ') {\r\n      c = c.substring(1);\r\n    }\r\n    if (c.indexOf(name) == 0) {\r\n      return c.substring(name.length, c.length);\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\n// Get random number between min and max, maximum is exclusive and the minimum is inclusive\r\nfunction random(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); \r\n}\r\n\r\n// Main container component for the entire application\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // Properties for the class to be passed on to other components, generates a random sessionID\r\n    this.state = {token: getCookie(\"token\"), username: '', password: '', sessionID: random(0,100000000), key: 0}\r\n    this.hadSignedUp = false\r\n\r\n    // Methods must be binded in React\r\n    this.connect = this.connect.bind(this)\r\n    this.random = this.random.bind(this)\r\n    this.powerModulo = this.powerModulo.bind(this)\r\n    this.updateToken = this.updateToken.bind(this)\r\n    this.showInformation = this.showInformation.bind(this)\r\n    this.hideInformation = this.hideInformation.bind(this)\r\n    this.logout = this.logout.bind(this)\r\n\r\n    // Create references to some components so their functions can be called between components\r\n    this.calendar = null;\r\n    this.nutritionInfo = React.createRef()\r\n    this.shoppingList = React.createRef()\r\n    this.loadingScreen = React.createRef()\r\n    this.connect()\r\n  }\r\n\r\n  // returns a ^ b % c, mathjs is used to prevent javascript from rounding large numbers\r\n  powerModulo(a,b,c) {\r\n      return mathjs.number(mathjs.mod(mathjs.pow(mathjs.bignumber(a),mathjs.bignumber(b)),mathjs.bignumber(c)))\r\n  }\r\n\r\n  // Get random number between min and max, maximum is exclusive and the minimum is inclusive\r\n  random(min, max) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min) + min); \r\n  }\r\n\r\n  // Updates the token by fetching it from cookies and re-rendering\r\n  updateToken() {\r\n    this.setState({\r\n      token: getCookie(\"token\")\r\n    })\r\n  }\r\n\r\n  // Communicates with the server to come up with a common key\r\n  connect() {\r\n    $.ajax({  // Sends a post request to the server at /exchange1\r\n      type: \"POST\",\r\n      url: domain+\"/exchange1\",\r\n      // Send sessionID to identify the client\r\n      data: JSON.stringify({ sessionID: this.state.sessionID }),\r\n      contentType: \"application/json; charset=utf-8\",\r\n      dataType: \"json\",\r\n      // We will recieve p, g, B from diffier hellman\r\n      success: (data) => {\r\n          var p = data.p\r\n          \r\n          var g = data.g\r\n          var B = data.B\r\n          \r\n          var a = this.random(0, 20) // Generate random host secret, range is arbitrary, but since this number is in the exponent it needs to be relatively small or else the product will be ridiculously large\r\n          \r\n          var A = this.powerModulo(g,a,p) // A = g^a % p\r\n          \r\n          this.setState({key: this.powerModulo(B, a, p)}) // Set our key to B^a % p\r\n          $.ajax({   // Send a post reqest with our calculations so the server can calculate the common key\r\n              type: \"POST\",\r\n              url: domain+\"/exchange2\",\r\n              // Send session ID and A\r\n              data: JSON.stringify({ sessionID: this.state.sessionID, A: A }),\r\n              contentType: \"application/json; charset=utf-8\",\r\n              dataType: \"json\"\r\n          })\r\n      }\r\n  });\r\n  }\r\n\r\n  // Logs out by just removing the token and reloading the page\r\n  logout() {\r\n    document.cookie = \"token=\"\r\n    window.location.reload(false);\r\n  }\r\n\r\n  showInformation() {\r\n    document.getElementById('Information').style.display='block'\r\n  }\r\n\r\n  hideInformation() {\r\n    document.getElementById('Information').style.display='none'\r\n  }\r\n\r\n  // Triggers population of data in the nutition info and shopping list once the calendar is loaded, as well as hiding the loading screen\r\n  calendarLoaded() {\r\n    this.nutritionInfo.reloadNutrition()\r\n    this.shoppingList.getIngredients()\r\n    this.loadingScreen.hide()\r\n  }\r\n\r\n  // Render method, called each time the state changes\r\n  render() {\r\n    console.log(window.location.pathname)\r\n    if (window.location.pathname == \"/app/\" || window.location.pathname == \"/app\") {\r\n      if (this.state.token) {   // Display the meal selector and calendar if user is logged in\r\n        return (  // Renders all the components as well as hidden components\r\n          <div style={{height: \"auto\", \"overflow\": \"hidden\"}}>\r\n            \r\n            <LoadingScreen ref={instance => { this.loadingScreen = instance }}/>\r\n  \r\n            \r\n  \r\n            <Export ref={instance => { this.export = instance }}  />\r\n  \r\n            <ImportRecipe ref={instance => {this.importRecipe = instance}} \r\n                          importData={(data) => {this.mealselector.importRecipe(data)}}\r\n                          sessionID={this.state.sessionID} \r\n                          secret={this.state.key}/>\r\n  \r\n            <CalendarRules sessionID={this.state.sessionID} \r\n                           secret={this.state.key}\r\n                           updateRulesets={(rulesets) => {this.calendar.updateRuleset(rulesets)}}\r\n                           ref={instance => {this.calendarRules = instance}} />\r\n  \r\n            <MealSelector sessionID={this.state.sessionID} \r\n                          secret={this.state.key}\r\n                          showWarning={() => this.warning.show()}\r\n                          showImport={() => this.importRecipe.show()}\r\n                          ref={instance => { this.mealselector = instance }}/>\r\n\r\n            <Warning ref={instance => { this.warning = instance }} \r\n                                deleteMeal={() => this.mealselector.deleteMeal()}/>  \r\n\r\n            <Calendar showExport={(comp) => this.export.show(comp)}\r\n                      showCalendarRules={(rulesets, currentRuleset, days, types) => this.calendarRules.show(rulesets, currentRuleset, days, types)}\r\n                      hadSignedUp={this.hadSignedUp} \r\n                      sessionID={this.state.sessionID} \r\n                      secret={this.state.key} \r\n                      fillEditor={(meal,from) => this.mealselector.fillEditor(meal,from)} \r\n                      getMeals={(callback) => this.mealselector.getMealsForCalendar(callback)}\r\n                      calendarLoaded={() => this.calendarLoaded()}\r\n                      ref={instance => { this.calendar = instance }}/>\r\n  \r\n            <ShoppingList showExport={(element) => this.export.show(element)}\r\n                          hadSignedUp={this.hadSignedUp} \r\n                          sessionID={this.state.sessionID} \r\n                          getCalendar={() => this.calendar.getterCalendar()} \r\n                          ref={instance => {this.shoppingList = instance}}\r\n                          secret={this.state.key}/>\r\n  \r\n            <NutritionInfo  getCalendar={(callback) => this.calendar.getterCalendar(callback)} \r\n                            ref={instance => {this.nutritionInfo = instance}}\r\n                            hadSignedUp={this.hadSignedUp} \r\n                            secret={this.state.key}/>\r\n  \r\n            \r\n  \r\n            <span id=\"logout\" onClick={this.logout}>Log Out</span>\r\n          </div>\r\n        )\r\n      } else {          // Display the Login/Signup page if user is not logged in\r\n        this.hadSignedUp = true\r\n        document.getElementById(\"root\").scrollTop = 0\r\n        return (\r\n          <div>\r\n            <AccountManager sessionID={this.state.sessionID} secret={this.state.key} updateToken={this.updateToken} />\r\n          </div>\r\n        );\r\n      }\r\n    } else if (window.location.pathname == \"/\") {\r\n      document.body.scrollTop = document.documentElement.scrollTop = 0;\r\n      return (\r\n        <div id=\"homepage\">\r\n          <div class=\"bgimg w3-container\" >\r\n            <center class=\"\">\r\n              <b style={{\"margin-bottom\": \"0px\", \"color\":\"#977390\", \"font-size\":\"70px\", \"text-shadow\":\"2px 2px 0 #444\", \"display\": \"block\"}}>Meal Planner Pro</b>\r\n              <i class=\"w3-xlarge slogan\">The Outline you Always Needed!</i>\r\n              <img id=\"burgerImg\" src=\"FinalBurger.png\" alt=\"Burger\"/>\r\n            </center>\r\n            <div class=\"w3-display-bottomleft w3-container w3-xlarge\">\r\n              <button onClick={this.showInformation} class=\" w3-btn w3-clear w3-border w3-border-grey w3-round-large\" style={{\"color\":\"#977390\", \"position\":\"static\"}}>Information</button>\r\n              <button onClick={() => {window.location.href = '/app'}} class=\" w3-btn w3-clear w3-border w3-border-grey w3-round-large\" style={{\"color\":\"#977390\", \"margin-left\": \"8px\"}}>Launch App</button>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"Information\" class=\"w3-modal\" style={{\"color\":\"#ffcc99\"}}>\r\n          <div class=\"w3-modal-content w3-animate-zoom\">\r\n            <div class=\"w3-container w3-display-container\" style={{\"color\":\"#977390\", \"background-color\":\"#ffcc99\"}}>\r\n              <span onClick={this.hideInformation} class=\"w3-button w3-display-topright w3-large\">x</span>\r\n              <h1>What is Meal Planner Pro?</h1>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container w3-large\" style={{\"color\":\"#ffcc99\", \"background-color\":\"#977390\"}}>\r\n              <p>Meal planner pro is an extremely intuitive and easy-to-use application that can benefit and organize your eating habits. With over 200 meals to select and choose from, Meal Planner Pro will make a calendar populated with meals, an ingredient list, and nutrition info based on the meals you selected.</p>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container\" style={{\"color\":\"#977390\", \"background-color\":\"#ffcc99\"}}>\r\n              <h1>How Does the Calender Work?</h1>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container w3-large\" style={{\"color\":\"#ffcc99\", \"background-color\":\"#977390\"}}>\r\n              <p>The calendar is one of the most crucial parts of the website. It is very customizable and easy to use. The calendar fills with new foods that you choose throughout the week. By default, the calendar populates with three separate meals per day, for each day in the week. If you want to add another meal per day, you can always just add a row to the calendar and choose the type of food that you want for that row. You can move and delete foods from the calendar as well. If you would like to print the calendar you can do so by pressing the export button on the top right of the section.</p>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container\" style={{\"color\":\"#977390\", \"background-color\":\"#ffcc99\"}}>\r\n              <h1>How do you use the Ingredient List?</h1>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container w3-large\" style={{\"color\":\"#ffcc99\", \"background-color\":\"#977390\"}}>\r\n              <p>The Ingredient list is intended to be used as a way to check off items you already have from the list and as a shopping list of sorts. The list is created from the information of each meal taken from the calendar and will accurately generate the exact amount of ingredients you will need for the entire week. You can also check the ingredients needed for any singular day of the week. You can also print out this list so you can bring the list to the grocery store with you.</p>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container\" style={{\"color\":\"#977390\", \"background-color\":\"#ffcc99\"}}>\r\n            <h1>What Kind of Meals are Avaliable?</h1>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container w3-large\" style={{\"color\":\"#ffcc99\", \"background-color\":\"#977390\"}}>\r\n              <p>With over 200 meals on Meal Planner Pro, and the ability to add new meals, the options are limitless. Below are just a few of the meals we have on our website.</p>\r\n            </div>\r\n            <img id=\"foodImg\" src=\"Food.png\" alt=\"Food\"/>\r\n            <div class=\"w3-container w3-display-container\" style={{\"color\":\"#977390\", \"background-color\":\"#ffcc99\"}}>\r\n              <h1>Anymore Questions, Concerns, or Issues?</h1>\r\n            </div>\r\n            <div class=\"w3-container w3-display-container w3-large\" style={{\"color\":\"#ffcc99\", \"background-color\":\"#977390\"}}>\r\n              <h2>Contact Us:</h2>\r\n              <h2>frankbevivino@gmail.com</h2>\r\n              <h2>max.j.segal@gmail.com</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        \r\n      )\r\n    }\r\n    \r\n  }\r\n}\r\n\r\n// Render the react Application component to the div with id \"root\" in index.html\r\nReactDOM.render(\r\n  /*<Router basename={'/app'}>\r\n    <Route path={`${process.env.PUBLIC_URL}/`} component={Application} />\r\n  </Router>,*/\r\n  <Application/>,\r\n  document.getElementById('root')\r\n);\r\n",["70","71"],"C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\AccountManager.js",["72","73","74","75","76","77","78","79","80","81"],"/* \r\nThis is the account manager window that pops up when the user is not signed in, it is resposible for:\r\n1. Allowing the user to input their user information\r\n2. Sending and encrypting user information to the server\r\n3. Retreiving a user token and sending back to the application\r\n*/\r\n\r\n// Import react native and css\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\n\r\n// Import jquery for sending post requests to host and AES for encryption\r\nimport $ from \"jquery\"\r\nvar domain = \"http://127.0.0.1:3000\"\r\nvar aesjs = require('aes-js');\r\n\r\n// Takes in an integer and returns a 128-bit array to be used as a key for AES\r\nfunction generate128BitKey(s) {\r\n    var key = []\r\n    for (var i = 0; i < 16; i++) {  // If s is 15 then the array will be: [15, 16, 17, 18, 19...]\r\n        key.push(s + i)\r\n    }\r\n    return key\r\n}\r\n\r\n// Encrypts string using s as a key and AES as the cipher\r\nfunction aesEncrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Converting our text into to bytes\r\n    var textBytes = aesjs.utils.utf8.toBytes(str);\r\n\r\n    // Encyrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n    var encryptedBytes = aesCtr.encrypt(textBytes)\r\n\r\n    // Converting back to text for easy handling in communication\r\n    var finalResult = aesjs.utils.hex.fromBytes(encryptedBytes)\r\n    return finalResult\r\n}\r\n\r\n// Decrypts string using s as a key and AES as the cipher\r\nfunction aesDecrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Convert our string back to bytes\r\n    var encryptedBytes = aesjs.utils.hex.toBytes(str);\r\n\r\n    // Decrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\r\n    var decryptedBytes = aesCtr.decrypt(encryptedBytes);\r\n\r\n    // Convert our bytes back into text\r\n    var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\r\n    return decryptedText\r\n}\r\n\r\n// Method to set cookie in browser\r\nfunction setCookie(cname, cvalue, exdays) {\r\n    var d = new Date();\r\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\r\n    var expires = \"expires=\"+ d.toUTCString();\r\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n}\r\n\r\nclass AccountManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Properties to save user inputs\r\n        this.state = {email: '', password: '', repassword: '', loginText: '', signupText: ''}\r\n    \r\n        // Class methods must be binded in React js\r\n        this.login = this.login.bind(this);\r\n        this.signup = this.signup.bind(this);\r\n    }\r\n\r\n    // Login function, encrypts user data and sends it to back end\r\n    login() {\r\n        var email = this.state.email;       // Retrieve email and password from state object\r\n        var password = this.state.password; \r\n\r\n        var encryptedEmail = aesEncrypt(email, this.props.secret)        // Encrypt email and password with our key that we get from the props\r\n        var encryptedPassword = aesEncrypt(password, this.props.secret)\r\n\r\n        // Send POST request to the server at the /login listener\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/login\",\r\n            data: JSON.stringify({ sessionID: this.props.sessionID, email: encryptedEmail, password: encryptedPassword }),  // Send sessionID, email, and password\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            success: (data) => {\r\n                setCookie(\"token\",data.token,100)   // If the user exists and password is correct set the token cookie to the token we recieved\r\n                this.props.updateToken()\r\n            },\r\n            // Handle firebase errors and display on the account manager\r\n            error: (xhr,status,error) => {\r\n                var message = xhr.responseJSON.message\r\n                console.log(message)\r\n                if (message == \"auth/invalid-email\" || message == \"auth/user-not-found\") {\r\n                    this.setState({loginText: \"Email doesn't have an account.\"})\r\n                } else if (message == \"auth/wrong-password\") {\r\n                    this.setState({loginText: \"Incorrect password.\"})\r\n                } \r\n                \r\n            }\r\n        });\r\n    }\r\n\r\n    signup() {\r\n        var email = this.state.email;\r\n        var password = this.state.password; \r\n        var repassword = this.state.repassword; \r\n\r\n        // Check that both passwords match, if not respond with an error and exit from method\r\n        if (password != repassword) {\r\n            this.setState({signupText: \"Both passwords must match.\"})\r\n            return\r\n        }\r\n\r\n        // Encrypt the email and password using AES\r\n        var encryptedEmail = aesEncrypt(email, this.props.secret)\r\n        var encryptedPassword = aesEncrypt(password, this.props.secret)\r\n\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/signup\",\r\n            // Send sessionID, encrypted email and password\r\n            data: JSON.stringify({ sessionID: this.props.sessionID, email: encryptedEmail, password: encryptedPassword }),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            // If we successfully sign in, save the received token as a cookie, which will trigger the app into starting\r\n            success: (data) => {\r\n                setCookie(\"token\",data.token,100)\r\n                this.props.updateToken()\r\n            },\r\n            // Parse firebase account errors and display on the account manager\r\n            error: (xhr,status,error) => {\r\n                console.log(\"!\")\r\n                var message = xhr.responseJSON.message\r\n                if (message == \"auth/invalid-password\") {\r\n                    this.setState({signupText: \"Password must be atleast 6 characters.\"})\r\n                } else if (message == \"auth/email-already-exists\") {\r\n                    this.setState({signupText: \"Email already has an account\"})\r\n                } else if (message == \"auth/invalid-email\") {\r\n                    this.setState({signupText: \"Email must be valid.\"})\r\n                } else if (message == \"auth/invalid-email\") {\r\n                    this.setState({signupText: \"Email must be valid.\"})\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Render function, called every time there is a state change\r\n    render() {\r\n        return (    // Format the account manager\r\n            <div class=\"w3-container\">\r\n                <div class=\"w3-card w3-round-large w3-panel w3-white\"  id=\"accountManager\">\r\n                    <center><h1>Welcome to Meal Planner</h1></center>\r\n                    <hr/>\r\n\r\n                    <h3>Login</h3>\r\n                    Email <br/>\r\n                    <input  onChange={(e) => this.setState({email: e.target.value})}></input> <br/>\r\n                    Password <br/>\r\n                    <input  type=\"password\" onChange={(e) => this.setState({password: e.target.value})}></input><br/>\r\n                    <span><button id=\"login\" onClick={this.login} class=\"w3-btn w3-round-medium w3-text-white\">Log In</button>\r\n                    <span style={{color: \"#785589\", \"margin-left\": \"5px\"}}>{this.state.loginText}</span>\r\n                    </span>\r\n                    \r\n\r\n                    <hr/>\r\n                    <h3>Sign Up</h3>\r\n                    Email <br/>\r\n                    <input onChange={(e) => this.setState({email: e.target.value})}></input><br/>\r\n                    Password <br/>\r\n                    <input type=\"password\" onChange={(e) => this.setState({password: e.target.value})}></input><br/>\r\n                    Repeat Password <br/>\r\n                    <input type=\"password\" onChange={(e) => this.setState({repassword: e.target.value})}></input><br/>\r\n                    <span><button id=\"signup\" onClick={this.signup} class=\"w3-btn w3-round-medium w3-text-white\">Sign Up</button>\r\n                    <span style={{color: \"#785589\", \"margin-left\": \"5px\"}}>{this.state.signupText}</span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AccountManager;","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\MealSelector.js",["82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"/* \r\nThis is the mealselector class, it contains the meal selection window AND the meal editor window, usually each window would be put in\r\nseperate components, but these two windows communicate in so many ways that it would be faster to bundle them into a single component.\r\nThis class is responsible for:\r\n1. Communicating with the server to fetch meals and update meal data\r\n2. Displaying meals in a filterable and togglable list by communicating with the Meal component\r\n3. Displaying a meal editor that is responsive to selections made in the meal selection window\r\n4. Communicating with the server to import meals\r\n5. Communicating with the calendar to dictate which meals can be picked\r\n*/\r\n\r\n// Import react native and css\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport '../index.css'\r\n\r\n// Import Meal component for displaying the meals in the meal list\r\nimport Meal from './Meal'\r\n\r\n// Import Images\r\nimport editImage from '../icons/edit.png'\r\nimport defaultImage from '../icons/default.png'\r\nimport filterIcon from '../icons/noFilter.png'\r\nimport noFilterIcon from '../icons/filter.png'\r\nimport deleteMealIcon from '../icons/delete.png'\r\nimport importRecipeIcon from '../icons/import.png'\r\n\r\n// Import jquery for sending post requests to host\r\nimport $ from \"jquery\"\r\nimport { rightArithShift, thomsonCrossSectionDependencies } from 'mathjs'\r\nvar aesjs = require('aes-js')\r\n\r\nvar domain = \"http://127.0.0.1:3000\"\r\n\r\n// Helper function to retreive the user token which is stored as a cookie\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie)\r\n    var ca = decodedCookie.split(';')\r\n    for(var i = 0; i <ca.length; i++) {\r\n        var c = ca[i]\r\n        while (c.charAt(0) == ' ') {\r\n        c = c.substring(1)\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length)\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\n// Takes in an integer and returns a 128-bit array to be used as a key for AES\r\nfunction generate128BitKey(s) {\r\n    var key = []\r\n    for (var i = 0; i < 16; i++) {  // If s is 15 then the array will be: [15, 16, 17, 18, 19...]\r\n        key.push(s + i)\r\n    }\r\n    return key\r\n}\r\n\r\n// Encrypts string using s as a key and AES as the cipher\r\nfunction aesEncrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Converting our text into to bytes\r\n    var textBytes = aesjs.utils.utf8.toBytes(str)\r\n\r\n    // Encyrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n    var encryptedBytes = aesCtr.encrypt(textBytes)\r\n\r\n    // Converting back to text for easy handling in communication\r\n    var finalResult = aesjs.utils.hex.fromBytes(encryptedBytes)\r\n    return finalResult\r\n}\r\n\r\n// Decrypts string using s as a key and AES as the cipher\r\nfunction aesDecrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Convert our string back to bytes\r\n    var encryptedBytes = aesjs.utils.hex.toBytes(str)\r\n\r\n    // Decrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n    var decryptedBytes = aesCtr.decrypt(encryptedBytes)\r\n\r\n    // Convert our bytes back into text\r\n    var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes)\r\n    return decryptedText\r\n}\r\n\r\n// MealSelector component, manages meal selection and editing\r\nclass MealSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props)    // Take parameters from parent component\r\n\r\n        // Global component variable, every time these are updated React will re-render MealSelector\r\n        this.state = {\r\n            \"meals\": {}, \r\n            \"selectedmeal\": {}, \r\n            \"mealname\": \"\", \r\n            servings: 1,\r\n            placeholder: \"Click on a Meal to Edit\",\r\n            filter: \"\",\r\n            applyFilter: true,\r\n            selectToggle: false\r\n        }\r\n\r\n        this.nameJustChanged = false\r\n\r\n        // Class methods must be binded in React\r\n\r\n        // Meal selection\r\n        this.getMeals               = this.getMeals.bind(this)\r\n        this.toggleFilter           = this.toggleFilter.bind(this)\r\n        this.handleFilterChange     = this.handleFilterChange.bind(this)\r\n        this.filterMeal             = this.filterMeal.bind(this)\r\n        this.enabled                = this.enabled.bind(this)\r\n        this.toggleSelect           = this.toggleSelect.bind(this)\r\n\r\n        // Meal editing\r\n        this.fillEditor             = this.fillEditor.bind(this)\r\n        this.handleAddIngredient    = this.handleAddIngredient.bind(this)\r\n        this.addIngredients         = this.addIngredients.bind(this)\r\n        this.handleNumChange        = this.handleNumChange.bind(this)\r\n        this.handleUnitChange       = this.handleUnitChange.bind(this)\r\n        this.handleRemoveItem       = this.handleRemoveItem.bind(this)\r\n        this.handleRemoveType       = this.handleRemoveType.bind(this)\r\n        this.handleRemoveCategory   = this.handleRemoveCategory.bind(this)\r\n        this.handleAddType          = this.handleAddType.bind(this)\r\n        this.handleAddCategory      = this.handleAddCategory.bind(this)\r\n        this.handleNotesUpdate      = this.handleNotesUpdate.bind(this)\r\n        this.handleServingsChange   = this.handleServingsChange.bind(this)\r\n        this.handleNutritionChange  = this.handleNutritionChange.bind(this)\r\n        this.handleNameChange       = this.handleNameChange.bind(this)\r\n        this.editImage              = this.editImage.bind(this)\r\n        this.imageInput             = this.imageInput.bind(this)\r\n        this.deleteMeal             = this.deleteMeal.bind(this)\r\n        this.importRecipe           = this.importRecipe.bind(this)\r\n\r\n        // Both\r\n        this.updateData             = this.updateData.bind(this)\r\n        this.stripText              = this.stripText.bind(this)\r\n    }\r\n\r\n    // Getter function for the calendar, only returns once meals have been retreived\r\n    getMealsForCalendar(callback=null) {\r\n        if (callback) {                     // A callback is only passed on the initial loading\r\n            this.getMeals(() => {\r\n                callback(this.state.meals)\r\n            })\r\n        } else {\r\n            return this.state.meals\r\n        }\r\n        \r\n    }\r\n\r\n    // Retreives meal data from the host\r\n    getMeals(callback=null) {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/user_data\",\r\n            data: JSON.stringify({ sessionID: this.props.sessionID, uid: getCookie(\"token\")}),  // Send sessionID and UID\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            success: (data) => {\r\n                // Set our meal state to the meal data we got from the host, we must first unecrypt it with the secret parameter and parse it into a JSON object\r\n                this.setState({\"meals\": JSON.parse(aesDecrypt(data.data,this.props.secret)).meals})\r\n\r\n                // A callback is only passed on the initial loading\r\n                if (callback) {\r\n                    callback()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // Sends modified meal data to the host\r\n    updateData() {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/set_data\",\r\n            // Send sessionID, user token, and the encrypted meals\r\n            data: JSON.stringify({ sessionID: this.props.sessionID, uid: getCookie(\"token\"), meals: aesEncrypt(JSON.stringify(this.state.meals),this.props.secret)}), \r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            timeout: 3000\r\n        })\r\n    }\r\n\r\n    // Triggered on meal click, add meal button click, and calendar meal click, updates info on what meal is currently being edited\r\n    fillEditor(mealname, from=null) {\r\n        if (mealname == \"newmeal\") {   // If a new meal is created\r\n\r\n            // Creates new meal data\r\n            var data = {\r\n                \"category\":[\"None\"],\r\n                \"enabled\":true,\r\n                // Default image with the camera icon\r\n                \"image\": \"https://assets.simplecast.com/assets/fallback/default-b7824fcd998f51baf0f0af359a72e760.png\",\r\n                \"ingredients\":false,\r\n                \"notes\":\"\",\r\n                \"nutrition\":{\"calories\":0,\"carbohydrates\":0,\"cholesterol\":0,\"fat\":0,\"protein\":0,\"sodium\":0},\r\n                \"servings\":1,\r\n                \"type\":[\"None\"],\r\n                \"url\":\"\",\r\n                \"name\":\"\"\r\n            }\r\n\r\n            document.getElementById(\"meallist\").scrollTop = 0\r\n            var meals = this.state.meals\r\n            meals[\"\"] = data\r\n            this.setState({\"selectedmeal\":data, \"mealname\":\"\", \"placeholder\": \"New Meal Name\", \"meals\":meals})   // When state variables change, the component re-renders and so the editor is filled\r\n        } else {\r\n            if (this.state.meals[mealname]) {\r\n                var data = this.state.meals[mealname]\r\n                this.setState({\"selectedmeal\":data, \"mealname\":mealname})   // When state variables change, the component re-renders and so the editor is filled\r\n    \r\n                if (from == \"calendar\") {   // If fillEditor is being called from calendar, scroll to the meal in the meal selector\r\n                    Array.from(document.getElementsByClassName(\"meal\")).forEach((meal) => {\r\n                        if (meal.getElementsByClassName(\"mealname\")[0].innerHTML == mealname) {\r\n                            meal.parentNode.scrollTop = meal.offsetTop               // Scrolls the meallist window to the meal selected\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }  \r\n    }\r\n\r\n    // Toggle selection of all meals (including filter)\r\n    toggleSelect() {\r\n        var selectToggle = this.state.selectToggle\r\n        var meals = this.state.meals\r\n\r\n        // Iterate through each item and toggle if it passes through the filter\r\n        Object.keys(this.state.meals).forEach((mealname) => {\r\n            if (this.filterMeal(this.state.meals[mealname], mealname)) {\r\n                meals[mealname].enabled = selectToggle\r\n            }\r\n        })\r\n\r\n        selectToggle = !selectToggle\r\n        this.setState({meals: meals, selectToggle: selectToggle}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Callback function for ingredient quantity modifications in the meal editor\r\n    handleNumChange(event) {\r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        meals[this.state.mealname][\"ingredients\"][event.target.id][\"num\"] = event.target.value  // Get input value and set to ingredient number\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})   // State variables modified, component re-renders\r\n        this.updateData()\r\n    }\r\n\r\n    // Callback function for ingredient unit modifications in the meal editor\r\n    handleUnitChange(event) {\r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        meals[this.state.mealname][\"ingredients\"][event.target.id][\"unit\"] = event.target.value\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})   // State variables modified, component re-renders\r\n        this.updateData()\r\n    }\r\n\r\n    // Callback function for the remove button in the meal editor for an ingredient\r\n    handleRemoveItem(event) {\r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        meals[this.state.mealname][\"ingredients\"].splice(event.target.id, 1)    // Removes 1 item at the i index\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})   // State variables modified, component re-renders\r\n        this.updateData()\r\n    }\r\n\r\n    // Callback function for the remove button in the meal editor for a type\r\n    handleRemoveType(event) {\r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        meals[this.state.mealname][\"type\"].splice(event.target.id, 1)    // Removes 1 item at the i index\r\n        if (meals[this.state.mealname][\"type\"].length == 0) {\r\n            meals[this.state.mealname][\"type\"].push(\"None\")\r\n        }\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})   // State variables modified, component re-renders \r\n        this.updateData()\r\n    }\r\n\r\n    // Callback function for the remove button in the meal editor for a category\r\n    handleRemoveCategory(event) {\r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        meals[this.state.mealname][\"category\"].splice(event.target.id, 1)    // Removes 1 item at the i index\r\n        if (meals[this.state.mealname][\"category\"].length == 0) {\r\n            meals[this.state.mealname][\"category\"].push(\"None\")\r\n        }\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})   // State variables modified, component re-renders\r\n        this.updateData()\r\n    }\r\n\r\n    // Triggered on the click of the green plus under the type accordion\r\n    handleAddType(event) {\r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        var newType = document.getElementById(\"typeInput\").value    // Get value of text input / dropdown\r\n        if (!newType) { return }\r\n        meals[this.state.mealname][\"type\"].unshift(newType)         // Add new type to the beginning of the array\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})   // State variables modified, component re-renders\r\n        this.updateData()\r\n        document.getElementById(\"typeInput\").value = \"\"\r\n    }\r\n\r\n    // Triggered on the click of the green plus under the category accordion\r\n    handleAddCategory(event) {\r\n        var meals = this.state.meals    \r\n        var newType = document.getElementById(\"categoryInput\").value    // Get value of text input / dropdown\r\n\r\n        if (!newType) { return }\r\n        meals[this.state.mealname][\"category\"].unshift(newType)         // Add new category to the beginning of the array\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals}, () => {   \r\n            this.updateData()\r\n        })  \r\n        document.getElementById(\"categoryInput\").value = \"\"\r\n    }\r\n\r\n    // Deletes the currently selected meal\r\n    deleteMeal() {\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {\r\n            var meals = this.state.meals\r\n            delete meals[this.state.mealname]\r\n\r\n            this.setState({\"selectedmeal\":{}, \"mealname\":\"\", placeholder: \"Click on a Meal to Edit\", servings: 1}, () => {\r\n                this.updateData()\r\n            })\r\n        }\r\n    }\r\n\r\n    // Called by the ImportRecipe component, adds all the new data to the selected meal\r\n    importRecipe(data) {\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {\r\n            var selectedmeal = this.state.selectedmeal\r\n\r\n            // Setting all the properties to the imported \r\n            selectedmeal.ingredients = data.ingredients\r\n            selectedmeal.nutrition = data.nutrition\r\n            selectedmeal.url = data.url\r\n            selectedmeal.image = data.image\r\n            selectedmeal.servings = data.servings\r\n\r\n            this.setState({selectedmeal: selectedmeal})\r\n        }\r\n    }\r\n\r\n    // Called when the input ingredient field is submitted\r\n    handleAddIngredient(event) {\r\n        \r\n        var meals = this.state.meals    // Make copy of meals object, we shouldn't modify state directly in React, only use setState\r\n        var num = document.getElementById(\"num\").value                  // Get value of quantity input\r\n        var unit = document.getElementById(\"unit\").value                // Get value of unit dropdown\r\n\r\n        if (!meals[this.state.mealname][\"ingredients\"]) {\r\n            meals[this.state.mealname][\"ingredients\"] = []\r\n        }\r\n\r\n        var ingredient = document.getElementById(\"ingredient\").value    // Get value of ingredient text input\r\n        var specifier = \"\"\r\n        if (ingredient.match(/\\(([^)]+)\\)/)) { \r\n            var specifier = \"(\"+ ingredient.match(/\\(([^)]+)\\)/)[1] +\")\"\r\n        }\r\n\r\n        var ingredient = ingredient.replace(/ *\\([^)]*\\) */g, \"\")         // Pulls out string that isn't in parentheses\r\n        num = (num ? num : -1)  // If num is blank, make the value -1\r\n        meals[this.state.mealname][\"ingredients\"].unshift({\"num\": num, \"unit\": unit, \"specifier\": specifier, \"item\": ingredient})\r\n        meals[this.state.mealname][\"ingredients\"] = this.addIngredients(meals[this.state.mealname])\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals}, () => {\r\n            this.updateData()\r\n        })\r\n\r\n        document.getElementById(\"num\").value = \"\"           // Reset the add ingredient prompt\r\n        document.getElementById(\"unit\").value = \"\"\r\n        document.getElementById(\"ingredient\").value = \"\"\r\n        \r\n    }\r\n\r\n    // Method to add a list of ingredients together\r\n    addIngredients(meal) {\r\n        var ingredients = meal.ingredients\r\n\r\n        // First we must sort the ingredients by item so we can add them together\r\n        var sorted_by_item = {}\r\n\r\n        // Iterate through each ingredient\r\n        ingredients.forEach(ingredient => {\r\n            if (ingredient) {\r\n                if (sorted_by_item[ingredient[\"item\"]]) {       // If the ingredient is in the json, add the ingredient to the list, otherwise start a list\r\n                    sorted_by_item[ingredient[\"item\"]].push(ingredient)\r\n                } else {\r\n                    sorted_by_item[ingredient[\"item\"]] = [ingredient]\r\n                }\r\n            }\r\n        })           \r\n                           \r\n                    \r\n        var final_list = {}\r\n    \r\n        Object.keys(sorted_by_item).forEach(item => {   // Go through each type of item in the sorted_items\r\n            var sorted_foods = sorted_by_item[item]     // Get the array for each type of item\r\n            var additions = {}\r\n            sorted_foods.forEach(food => {              // Iterate through each food in this array\r\n\r\n                 // Converting to common units\r\n                if (food[\"unit\"] == \"tablespoon\"){      \r\n                    food[\"num\"] *= 3\r\n                    food[\"unit\"] = \"teaspoon\"\r\n                } else if (food[\"unit\"] == \"cup\") {\r\n                    food[\"num\"] *= 48\r\n                    food[\"unit\"] = \"teaspoon\"\r\n                } else if (food[\"unit\"] == \"ounce\") {\r\n                    food[\"num\"] *= 6\r\n                    food[\"unit\"] = \"teaspoon\"\r\n                } \r\n\r\n                var specifier = \"\"\r\n                if (food[\"specifier\"] != \"\") {  // Adds specifer to ingredient name if there is one\r\n                    specifier = \" \" + food[\"specifier\"]\r\n                }\r\n\r\n                // Adds ingredients together with a common unit and specifer\r\n                if (additions[food[\"unit\"] + specifier]) {\r\n                    additions[food[\"unit\"] + specifier] += parseFloat(food[\"num\"])\r\n                } else {\r\n                    additions[food[\"unit\"] + specifier] = parseFloat(food[\"num\"])\r\n                }\r\n            })\r\n\r\n            final_list[item] = additions    // Adds the added ingredient info to the final list under the ingredient's name\r\n        })\r\n    \r\n        var product = []\r\n\r\n        // Iterate through each ingredient item on the list\r\n        Object.keys(final_list).forEach(item => {\r\n            Object.keys(final_list[item]).forEach(unit => {\r\n                var specifier = \"\"\r\n                if (unit.match(/\\(([^)]+)\\)/)) {    // If there is something in the ingredient that looks like: (specifer) inthe unit pull it out\r\n                    var specifier = \"(\"+ unit.match(/\\(([^)]+)\\)/)[1] +\")\"\r\n                }\r\n\r\n                var funit = unit.replace(/ *\\([^)]*\\) */g, \"\")       // Use regex to pull the unit from the item\r\n\r\n                var num = final_list[item][unit]        // Get number\r\n                if (funit == \"teaspoon\" && num >= 3) {  // Convert to common measurements\r\n                    funit = \"tablespoon\"\r\n                    num = num / 3\r\n                }\r\n                if (funit == \"tablespoon\" && num >= 16) {\r\n                    funit = \"cup\"\r\n                    num = num / 16\r\n                }\r\n\r\n                // Save ingredient data to the product\r\n                product.push({\"item\":item, \"unit\":funit, \"num\":num, \"specifier\":specifier})\r\n            })\r\n            \r\n        })\r\n\r\n        return product\r\n    }\r\n\r\n    // Triggered on change to the notes text areas\r\n    handleNotesUpdate(event) {\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {      // Check if there is a selectedmeal\r\n            var meals = this.state.meals    \r\n\r\n            meals[this.state.mealname][\"notes\"] = event.target.value    // Get text from textarea\r\n            this.setState(prevState => {\r\n                var meals = Object.assign({}, prevState.meals)\r\n                meals[this.state.mealname][\"notes\"] = event.target.value\r\n                return { meals }\r\n            }, () => {\r\n                this.updateData()\r\n            })\r\n        }\r\n    }\r\n\r\n    // Triggers on change to the servings in the nutrition accordion and recalculates ingredient amount\r\n    handleServingsChange(event) {\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {  // Checks if there is a meal selected\r\n            var servings = event.target.value\r\n\r\n            if (event.target.value == \"\") {     // If there is no value in the input field, add a 1\r\n                servings = \"1\"\r\n            }\r\n\r\n            var meals = this.state.meals \r\n\r\n            var prevServings = meals[this.state.mealname].servings      // Get previous number of servings for calculations\r\n            meals[this.state.mealname].servings = parseInt(servings)    // Get servings number from the input field\r\n\r\n            if (meals[this.state.mealname][\"ingredients\"]) {    // If there are ingredients in the list\r\n\r\n                // Iterate through each ingredient\r\n                meals[this.state.mealname][\"ingredients\"] = meals[this.state.mealname][\"ingredients\"].map(ingredient => {\r\n                    if (ingredient[\"num\"] != -1) {  // If the ingredient has a number, convert it\r\n                        ingredient[\"num\"] = (ingredient[\"num\"] / prevServings) * parseInt(servings)\r\n                    }\r\n                    return ingredient\r\n                })\r\n            }\r\n\r\n            this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals}, () => {\r\n                this.updateData()\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    // Triggers on change of a nutrition component and updates the data\r\n    handleNutritionChange(event) {\r\n        var meals = this.state.meals\r\n\r\n        meals[this.state.mealname].nutrition[event.target.id] = event.target.value      // Uses the id from the element to store the new value their\r\n        this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals}, () => {\r\n            this.updateData()\r\n        })\r\n\r\n    }\r\n\r\n    // Called when the name of the selected meal is changed in the meal editor\r\n    handleNameChange(event) {\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {  // Checks that a meal has been selected\r\n            var meals = this.state.meals\r\n\r\n            meals[event.target.value] = meals[this.state.mealname]  // Creates a new but identical meal \r\n            delete meals[this.state.mealname]\r\n\r\n            this.nameJustChanged = true\r\n            this.setState({\"selectedmeal\":meals[event.target.value], \"meals\":meals, \"mealname\":event.target.value})\r\n            this.updateData()\r\n        }\r\n    }\r\n\r\n    // Called on filter input change, updates the filter keyword\r\n    handleFilterChange(event) {\r\n        this.setState({filter: event.target.value})\r\n    }\r\n\r\n    // Called on filter button click, enables/disables filtering\r\n    toggleFilter() {\r\n        this.setState({applyFilter: !this.state.applyFilter})\r\n    }\r\n\r\n    // Checks if a meal has any data that includes the filter keywords\r\n    filterMeal(meal, mealname) {\r\n        var filter = this.state.filter.toLowerCase()\r\n\r\n        // Check if the filter is in the item name or notes\r\n        if (mealname.toLowerCase().includes(filter) || (meal.notes && meal.notes.toLowerCase().includes(filter))) {\r\n            return true\r\n        }\r\n\r\n        // Check if the filter is in any of the meal's types\r\n        for (var type of meal.type) {\r\n            if (type.toLowerCase().includes(filter)) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        // Check if the filter is any of the meal's categories\r\n        for (var category of meal.category) {\r\n            if (category.toLowerCase().includes(filter)) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        // Iterate through the meal's ingredients to see if any of the item names contain our filter keyword\r\n        if (meal.ingredients) {\r\n            for (var ingredient of meal.ingredients) {\r\n                if (ingredient.item.toLowerCase().includes(filter)) { \r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the filter is in none of the above, return false\r\n        return false\r\n    }\r\n\r\n    // Triggered on toggle to the switch in the meal component\r\n    enabled(event, mealname) {\r\n        var meals = this.state.meals\r\n\r\n        meals[mealname].enabled = event.target.checked\r\n        this.setState({\"meals\":meals}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggered on click of the pen icon on the meal image\r\n    editImage() {\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {  // If there is a selected meal, click the invisible fileselector\r\n            document.getElementById('fileselector').click()\r\n        }\r\n    }\r\n\r\n    // Called on click of fileselector\r\n    imageInput() {\r\n        var meals = this.state.meals    \r\n\r\n        const reader = new FileReader()\r\n        var file = document.getElementById('fileselector').files[0] // Get the first file chosen\r\n\r\n        // When image is loaded update the data and re-render\r\n        reader.addEventListener(\"load\", () => {\r\n            meals[this.state.mealname][\"image\"] = reader.result\r\n            this.setState({\"selectedmeal\":meals[this.state.mealname], \"meals\":meals})\r\n            this.updateData()\r\n        }, false);\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n\r\n    // Strips a string to a certain amount of characters and adds a \"...\"\r\n    stripText(text, n) {\r\n        if (text.length > n) {\r\n            return text.slice(0,n-3) + \"...\"\r\n        } else {\r\n            return text\r\n        }\r\n    }\r\n\r\n    // Runs after the component has rendered for the first time, just sets up the style logic for the accordian menu in the meal editor\r\n    componentDidMount () {\r\n        var acc = document.getElementsByClassName(\"accordion\")\r\n        var i\r\n\r\n        // Iterate through each accordion\r\n        for (i = 0; i < acc.length; i++) {\r\n            acc[i].addEventListener(\"click\", function () {    // Triggers on accordion click and toggles showing the contents of the accordions\r\n                this.classList.toggle(\"active\")\r\n\r\n                var panel = this.nextElementSibling\r\n\r\n                if (panel.style.display === \"block\") {\r\n                    panel.style.display = \"none\"\r\n                } else {\r\n                    panel.style.display = \"block\"\r\n                }\r\n            })\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    // Runs after the component is rendered\r\n    componentDidUpdate() {\r\n        if (this.nameJustChanged) {\r\n            Array.from(document.getElementsByClassName(\"meal\")).forEach((meal) => {\r\n                if (meal.getElementsByClassName(\"mealname\")[0].innerHTML == this.state.mealname) {  \r\n                    meal.parentNode.scrollTop = meal.offsetTop       // Scrolls in the meallist to selectedmeal\r\n                }\r\n            })\r\n            this.nameJustChanged = false\r\n        }\r\n    }\r\n\r\n    \r\n    // Render function\r\n    render() {\r\n        \r\n        // If it is the first time rendering, get meals\r\n        if (getCookie(\"token\") && this.props.secret && Object.keys(this.state.meals).length === 0) {\r\n            this.getMeals()\r\n        }\r\n\r\n        \r\n        var meals = []\r\n\r\n        Object.keys(this.state.meals).sort((a, b) => {              // First sort the meals alphabetically case insensitive\r\n            return a.toLowerCase().localeCompare(b.toLowerCase())\r\n        }).forEach(meal => {                                        // Iterate through each meal and return the meal component\r\n            if (this.state.applyFilter) {\r\n                if (this.filterMeal(this.state.meals[meal], meal) ) {\r\n                    meals.push(<Meal name={meal} data={this.state.meals[meal]} onClick={() => this.fillEditor(meal)} selectedMeal={this.state.mealname} enabled={this.enabled}/>)\r\n                }\r\n            } else {\r\n                meals.push(<Meal name={meal} data={this.state.meals[meal]} onClick={() => this.fillEditor(meal)} selectedMeal={this.state.mealname} enabled={this.enabled}/>)\r\n            }\r\n            \r\n        })\r\n\r\n        var types = []\r\n        var categories = []\r\n        var ingredients = []\r\n\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {\r\n            var servings = this.state.selectedmeal.servings\r\n        } else {\r\n            var servings = \"\"\r\n        }\r\n        \r\n\r\n        // If there is a meal thats selected, fill the accordian menu with the types, categories, and ingredients\r\n        if (Object.keys(this.state.selectedmeal).length > 0) {\r\n\r\n            // Add an input field to the type accordion\r\n            types.push(\r\n                <div class=\"item\">\r\n                    <input list=\"types\" type=\"text\" id=\"typeInput\"/>\r\n                    \r\n                    <datalist id=\"types\">\r\n                        <option value=\"Breakfast\"></option>\r\n                        <option value=\"Lunch\"></option>\r\n                        <option value=\"Dinner\"></option>\r\n                        <option value=\"Dessert\"></option>\r\n                        <option value=\"Snack\"></option>\r\n                    </datalist>\r\n                    <span class=\"plusicon\" onClick={this.handleAddType}>+</span>\r\n                </div>\r\n            )\r\n\r\n            var i = 0   // We're gonna keep track of the index so we can use it to identify the type in the callback function\r\n\r\n            // Iterate through each type in the selectedmeal to fill the type accordion\r\n            this.state.selectedmeal.type.forEach(type => {\r\n                if (type != \"None\") {\r\n                    types.push(\r\n                        <div class=\"item\">\r\n                            <p>{type}</p>\r\n                            <span class=\"xicon\" id={i} onClick={this.handleRemoveType}>✕</span>\r\n                        </div>\r\n                    )\r\n                    i++\r\n                }\r\n            })\r\n            \r\n            // Fill the unit dropdown with the unit options\r\n            var options = [\"Chicken\",\"Beef\",\"Salad\",\"Soup\",\"Stew\",\"Pasta\",\"Egg\",\"Pork\",\"Fish\",\"Sandwich\",\"Seafood\",\"Baked\",\"Fried\",\"Bread\",\"Pizza\"].map(category => {\r\n                return(<option value={category}></option>)\r\n            })\r\n\r\n            // Add a input field for adding new categories\r\n            categories.push(\r\n                <div class=\"item\">\r\n                    <input list=\"categories\" type=\"text\" id=\"categoryInput\"/>\r\n                    \r\n                    <datalist id=\"categories\" value=\"category\">\r\n                        {options}\r\n                    </datalist>\r\n                    <span class=\"plusicon\" onClick={this.handleAddCategory}>+</span>\r\n                </div>\r\n            )\r\n\r\n            var i = 0   // We're gonna keep track of the index so we can use it to identify the category in the callback function\r\n\r\n            // Iterate through each category in the selected meal to fill the category accordion\r\n            this.state.selectedmeal.category.forEach(category => {\r\n                if (category != \"None\") {\r\n                    categories.push(\r\n                        <div class=\"item\">\r\n                            <p>{category}</p>\r\n                            <span class=\"xicon\" id={i} onClick={this.handleRemoveCategory}>✕</span>\r\n                        </div>\r\n                    )\r\n                    i++\r\n                }\r\n            })\r\n\r\n            // Fill the unit dropdown with the unit options\r\n            var options = [\"teaspoon\",\"tablespoon\",\"cup\",\"pint\",\"ounce\",\"package\",\"slice\",\"pinch\",\"clove\",\"piece\",\"pound\"].map((unit) => {\r\n                return (<option value={unit}>{unit}</option>)\r\n            })\r\n\r\n            // Add a empty ingredient component for the inpuwtting of new ingredients\r\n            ingredients.push(\r\n                <div>\r\n                    <div class=\"item\" class=\"addingredient\">\r\n                        <input type=\"number\" min=\"0\" id=\"num\"/>\r\n                        <select id=\"unit\">\r\n                            <option value=\"\"></option>\r\n                            {options}\r\n                        </select>\r\n                        <input type=\"text\" id=\"ingredient\"></input>\r\n                        <span class=\"plusicon\" onClick={this.handleAddIngredient} style={{transform: \"translate(0px,-15px)\"}}>+</span>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n            var i = 0   // We're gonna keep track of the index so we can use it to identify the ingredient in the callback function\r\n            if (this.state.selectedmeal.ingredients) {\r\n\r\n                // Iterate through each ingredient\r\n                this.state.selectedmeal.ingredients.forEach(ingredient => {\r\n                    if (ingredient.num == -1) { \r\n                        ingredients.push(       // Add the ingredient component if there is no number\r\n                            <div class=\"item\">\r\n                                <p>{ingredient.unit +\" \"+ ingredient.specifier +\" \"+ ingredient.item}</p>\r\n                                <span class=\"xicon\" id={i} onClick={this.handleRemoveItem}>✕</span>\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        // Fill the unit dropdown with the unit options\r\n                        var options = [\"teaspoon\",\"tablespoon\",\"cup\",\"pint\",\"ounce\",\"package\",\"slice\",\"pinch\",\"clove\",\"piece\",\"pound\",\"jar\"].map((unit) => {\r\n                            if (unit != ingredient.unit) {\r\n                                return (<option value={unit}>{unit}</option>)\r\n                            }\r\n                        })\r\n\r\n                        ingredients.push(   // Add the ingredient component to the ingredient list\r\n                            <div class=\"item\">\r\n                                <input type=\"number\" id={i} min=\"0\" value={ingredient.num} onChange={this.handleNumChange}/>\r\n                                <select value={ingredient.unit} id={i} onChange={this.handleUnitChange} style={ingredient.unit ? {\"display\":\"inline\"} : {\"display\":\"none\"}}>\r\n                                    <option value=\"DEFAULT\">{ingredient.unit}</option>\r\n                                    {options}\r\n                                </select>\r\n                                <p>{this.stripText(ingredient.specifier +\" \"+ ingredient.item,29)}</p>\r\n                                <span class=\"xicon\" id={i} onClick={this.handleRemoveItem}>✕</span>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    i++\r\n                })\r\n            }\r\n            \r\n            // Iterate through each cmponent of the nutrition info\r\n            var nutritionInfo = Object.keys(this.state.selectedmeal.nutrition).map(info => {\r\n                var unit = \"\"\r\n                if (info == \"protein\" || info == \"carbohydrates\" || info == \"fat\") { unit = \"(g)\"}  // If the unit is in grams, add a (g)\r\n                if (info == \"sodium\" || info == \"cholesterol\") { unit = \"(mg)\"}                     // If the unit is in milligrams, add a (mg)\r\n\r\n                return (    // Format the nutrition component\r\n                    <div class=\"item nutritionitem\">\r\n                        {info[0].toUpperCase() + info.slice(1) + \" \"+ unit}\r\n                        <input type=\"number\" id={info} min=\"0\" style={{float: \"right\", \"margin-right\":\"10px\"}} onChange={this.handleNutritionChange} value={this.state.selectedmeal.nutrition[info]}/>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n        \r\n\r\n        // If there are notes fill the notes section with them\r\n        var notes = this.state.selectedmeal[\"notes\"]\r\n        if (!notes) {\r\n            notes = \"\"\r\n        }\r\n\r\n        // If there is an image to the selected meal, show it. Otherwise, show the deafault camera icon.\r\n        var mealEditorImage = defaultImage\r\n        if (this.state.selectedmeal.image) {\r\n            mealEditorImage = this.state.selectedmeal.image\r\n        }\r\n\r\n        return (    // Format the meal selection window and the meal editor window\r\n            <div>\r\n                <div id=\"mealselector\" class=\"w3-card-4 w3-margin\">\r\n                    <div id=\"header\" style={{\"margin-bottom\": \"0px\",height: \"40px\"}}>\r\n                        <h3 style={{\"display\": \"inline-block\", \"margin\": \"0px\"}}>Meal Selection</h3>\r\n                        <div id=\"filterParent\">\r\n                            <input id=\"filterText\" value={this.state.filter} placeholder=\"Filter\" onChange={this.handleFilterChange}></input>\r\n                            <button id=\"filterButton\" class=\"w3-button w3-hover-white w3-round-large\" onClick={this.toggleFilter}>\r\n                                <img id=\"filterIcon\" src={this.state.applyFilter ? filterIcon : noFilterIcon}></img>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"meallist\">\r\n                        {meals}\r\n                    </div>\r\n                    <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n                        <button class=\"addmealbutton w3-button w3-hover-white w3-round-large\" onClick={() => this.fillEditor(\"newmeal\")}>Add Meal</button>\r\n                        <button class=\"selecttogglebutton w3-button w3-hover-white w3-round-large\" onClick={this.toggleSelect}>{this.state.selectToggle ? \"Select All\" : \"Deselect All\"}</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"mealeditor\" class=\"w3-card-4 w3-margin\">\r\n                    <div id=\"header\" style={{\"margin-bottom\": \"0px\",height: \"40px\"}}>\r\n                        <h3 style={{\"margin-top\":\"0px\",\"display\": \"inline-block\"}}>Meal Editor</h3>\r\n                        <button id=\"deleteMealButtonEditor\" onClick={this.props.showWarning}>\r\n                            <img id=\"deleteMealIcon\" src={deleteMealIcon}></img>\r\n                        </button>\r\n                        <button id=\"importRecipe\" onClick={this.props.showImport}>\r\n                            <img id=\"importRecipeIcon\" src={importRecipeIcon}></img>\r\n                        </button>\r\n                    </div>\r\n                    <div id=\"editor\">\r\n                        <button class=\"accordion\">Types</button>\r\n                        <div class=\"panel\">{types}</div>\r\n                        \r\n                        <button class=\"accordion\">Categories</button>\r\n                        <div class=\"panel\">{categories}</div>\r\n\r\n                        \r\n                        <input type=\"number\" min=\"1\" max=\"100\" value={servings} onChange={this.handleServingsChange} id=\"servings\"/>\r\n                        <button class=\"accordion\">Ingredients<span style={{float: \"right\", \"margin-right\": \"8px\"}}>Servings</span></button>\r\n                        <div class=\"panel\">\r\n                            {ingredients}\r\n                        </div>\r\n\r\n                        <button class=\"accordion\">Nutrition <span style={{color: \"gray\"}}>(Per Serving)</span></button>\r\n                        <div class=\"panel\">{nutritionInfo}</div>\r\n\r\n                        <button class=\"accordion\">Notes</button>\r\n                        <div class=\"panel\">\r\n                            <textarea onChange={this.handleNotesUpdate} value={notes}></textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"footer\" style={{height:\"40px\",transform:\"translate(0,10px)\"}}>\r\n                        <img class=\"mealimage\" id=\"mealEditorImage\" style={{height:\"35px\"}} src={mealEditorImage}></img>\r\n                        <input type=\"file\" id=\"fileselector\" style={{display: \"none\"}} onChange={this.imageInput}></input>\r\n                        <button id=\"editImageButton\"><img id=\"editImage\" src={editImage} onClick={this.editImage}></img></button>\r\n                        <input style={{display:\"inline\",\"width\":\"45%\",\"transform\":\"translate(-10px,0px)\"}} onChange={this.handleNameChange} value={this.state.mealname} placeholder={this.state.placeholder}></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MealSelector","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Calendar.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196"],"/* \r\nThis is the class for the calendar window, it is responsible for:\r\n1. Communicating with the server to save calendar data\r\n2. Communicating with the mealselector to show clicked meals and get meals that are enabled\r\n3. Display each meal cell and makes them interactive\r\n4. Displays each type as a row of meal cells that can all be manipulated at once\r\n5. Displays each day as a column of meal cells that can be enabled/disbaled at once\r\n6. Communicates with the rule generator\r\n7. Uses rules from the rule generator to generate the meal cells\r\n8. Communicating with nutrition info and shopping list to convey data\r\n*/\r\n\r\n// Import for React native and the css\r\nimport React, { useLayoutEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport '../index.css'\r\n\r\n// Icon image imports\r\nimport reload from '../icons/reload.png'\r\nimport reloadblue from '../icons/reloadblue.png'\r\nimport checkmark from \"../icons/tick.png\"\r\nimport greenCheckmark from \"../icons/greentick.png\"\r\nimport plus from \"../icons/plus.png\"\r\nimport exportIcon from \"../icons/export.png\"\r\nimport hamburger from \"../icons/hamburger.png\"\r\nimport editRulesIcon from '../icons/editRules.png'\r\n\r\n// Import jquery for sending post requests to host\r\nimport $ from \"jquery\"\r\nvar aesjs = require('aes-js')\r\n\r\nvar domain = \"http://127.0.0.1:3000\"\r\n\r\n// Global variables for dragging calendar cells and rows\r\nvar draggedFrom = []\r\nvar draggedTo = []\r\nvar draggedFromType = \"\"\r\nvar draggedToType = \"\"\r\n\r\n// Helper function to retreive the user token which is stored as a cookie\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\"\r\n    var decodedCookie = decodeURIComponent(document.cookie)\r\n    var ca = decodedCookie.split(';')\r\n    for(var i = 0; i <ca.length; i++) {\r\n        var c = ca[i]\r\n        while (c.charAt(0) == ' ') {\r\n        c = c.substring(1)\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length)\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\n// Takes in an integer and returns a 128-bit array to be used as a key for AES\r\nfunction generate128BitKey(s) {\r\n  var key = []\r\n  for (var i = 0; i < 16; i++) {  // If s is 15 then the array will be: [15, 16, 17, 18, 19...]\r\n    key.push(s + i)\r\n  }\r\n  return key\r\n}\r\n\r\n// Encrypts string using s as a key and AES as the cipher\r\nfunction aesEncrypt(str, s) {\r\n  // Turns our integer key into a 128-bit key\r\n  var key = generate128BitKey(s)\r\n  \r\n  // Converting our text into to bytes\r\n  var textBytes = aesjs.utils.utf8.toBytes(str)\r\n  \r\n  // Encyrypting our bytes using AES Counter mode\r\n  var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n  var encryptedBytes = aesCtr.encrypt(textBytes)\r\n\r\n  // Converting back to text for easy handling in communication\r\n  var finalResult = aesjs.utils.hex.fromBytes(encryptedBytes)\r\n  return finalResult\r\n}\r\n\r\n// Decrypts string using s as a key and AES as the cipher\r\nfunction aesDecrypt(str, s) {\r\n  // Turns our integer key into a 128-bit key\r\n  var key = generate128BitKey(s)\r\n\r\n  // Convert our string back to bytes\r\n  var encryptedBytes = aesjs.utils.hex.toBytes(str)\r\n\r\n  // Decrypting our bytes using AES Counter mode\r\n  var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n  var decryptedBytes = aesCtr.decrypt(encryptedBytes)\r\n\r\n  // Convert our bytes back into text\r\n  var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes)\r\n  return decryptedText\r\n}\r\n\r\n// When we try and copy objects in javascript, javascript will just create a reference. Using jsonCopy, we can create a deep copy of the src.\r\nfunction jsonCopy(src) {\r\n  return JSON.parse(JSON.stringify(src))\r\n}\r\n\r\n// Class for the calendar window\r\nclass Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // Class properties to store data on the calendat and the rulesets\r\n    this.state = {types: [], \"days\": {}, meals: {}, calendar: {}, calendarJSX: [], overallServings: 2, rulesets: {}, currentRuleset: 0}\r\n    \r\n    // Class methods must be binded in react\r\n    this.getData =                this.getData.bind(this)\r\n    this.generateCalendar =       this.generateCalendar.bind(this)\r\n    this.reloadMeal =             this.reloadMeal.bind(this)\r\n    this.deleteMeal =             this.deleteMeal.bind(this)\r\n    this.toggleDay =              this.toggleDay.bind(this)\r\n    this.updateData =             this.updateData.bind(this)\r\n    this.addType =                this.addType.bind(this)\r\n    this.typeNameChange =         this.typeNameChange.bind(this)\r\n    this.overallServingsUpdate =  this.overallServingsUpdate.bind(this)\r\n    this.applyServingsOverride =  this.applyServingsOverride.bind(this)\r\n    this.changeMealServings =     this.changeMealServings.bind(this)\r\n    this.getCalendar =            this.getCalendar.bind(this)\r\n    this.getCalendarExport =      this.getCalendarExport.bind(this)\r\n    this.editRules =              this.editRules.bind(this)\r\n    this.updateRuleset =          this.updateRuleset.bind(this)\r\n    this.changeCurrentRuleset =   this.changeCurrentRuleset.bind(this)\r\n    this.getAllowedMeals =        this.getAllowedMeals.bind(this)\r\n    this.filterMeal =             this.filterMeal.bind(this)\r\n    this.ruleIsValid =            this.ruleIsValid.bind(this)\r\n    this.getTotals =              this.getTotals.bind(this)\r\n    this.getRepeats =             this.getRepeats.bind(this)\r\n    this.getCategoriesPresent =   this.getCategoriesPresent.bind(this)\r\n  }\r\n\r\n  // Retreives user data from the host\r\n  getData(callback = null) {\r\n    $.ajax({\r\n        type: \"POST\",\r\n        url: domain +\"/user_data\",\r\n        data: JSON.stringify({ sessionID: this.props.sessionID, uid: getCookie(\"token\")}),  // Send sessionID and UID\r\n        contentType: \"application/json; charset=utf-8\",\r\n        dataType: \"json\",\r\n        success: (data) => {\r\n            // Set our meal state to the meal data we got from the host, we must first unecrypt it with the secret parameter and parse it into a JSON object\r\n            var data = JSON.parse(aesDecrypt(data.data,this.props.secret))\r\n            this.setState({\r\n              \"meals\": data.meals, \r\n              \"types\": data.types, \r\n              \"days\": data.days, \r\n              \"calendar\": data.calendar, \r\n              \"rulesets\": data.rulesets,\r\n              \"currentRuleset\": data.currentRuleset\r\n            }, () => {\r\n              if (callback) { callback() }\r\n            })\r\n        },\r\n        error: (e) => {\r\n            console.log(e)\r\n        }\r\n    })\r\n  }\r\n\r\n  // Sends state data to the server\r\n  updateData() {\r\n    $.ajax({  // Sends a post request to the server at /set_data\r\n        type: \"POST\",\r\n        url: domain +\"/set_data\",\r\n        // Send sessionID, userID, and encrypted calendar information\r\n        data: JSON.stringify({ \r\n          sessionID: this.props.sessionID, \r\n          uid: getCookie(\"token\"), \r\n          days: aesEncrypt(JSON.stringify(this.state.days),this.props.secret), \r\n          types: aesEncrypt(JSON.stringify(this.state.types),this.props.secret),\r\n          calendar: aesEncrypt(JSON.stringify(this.state.calendar),this.props.secret)\r\n        }),\r\n        contentType: \"application/json; charset=utf-8\",\r\n        dataType: \"json\"\r\n    })\r\n  }\r\n\r\n  // Function called by CalendarRules to update ruleset information on the calendar\r\n  updateRuleset(rulesets) {\r\n    this.setState({rulesets: rulesets}, () => {\r\n      if (this.state.currentRuleset >= rulesets.length) {   // If a ruleset was deleted and the calendar was using that ruleset, change the current ruleset index\r\n        this.setState({currentRuleset: rulesets.length-1})\r\n      }\r\n    })\r\n  }\r\n\r\n  // Triggered on change in the ruleset dropdown\r\n  changeCurrentRuleset(event) {\r\n    this.setState({currentRuleset: event.target.value})\r\n  }\r\n\r\n  // A getter function for getting calendar data for other components such as the shoppinglist or the nutrition info\r\n  getterCalendar(callback = null) {\r\n    if (callback) {\r\n      this.getData(() => {\r\n        callback(this.state.calendar)\r\n      })\r\n    } else {\r\n      return this.state.calendar\r\n    }\r\n  }\r\n\r\n  // Function for checking if a selector would be selecting for a certain day and type\r\n  mealSelected(selector, day, type) {\r\n    return ((selector.select == \"day\" && selector.parameters.includes(day)) || (selector.select == \"type\" && selector.parameters.includes(type)) || selector.parameters.includes(\"all\"))\r\n  }\r\n\r\n  // Checks if rule isn't a new one or has any empty fields\r\n  ruleIsValid(rule) {\r\n    if (!rule.new) {\r\n\r\n      // Iterates through each parameter to see if any are empty\r\n      for (var parameter of Object.keys(rule.parameters)) {\r\n        if (!rule.parameters[parameter]) {\r\n          return false\r\n        }\r\n      }\r\n\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Checks if a meal has any data that includes the filter keywords, if it does return true, otherwise false\r\n  filterMeal(filter, meal, mealname) {\r\n\r\n    // Check if the filter is in the item name or notes\r\n    if (mealname.toLowerCase().includes(filter) || (meal.notes && meal.notes.toLowerCase().includes(filter))) {\r\n        return true\r\n    }\r\n\r\n    // Check if the filter is in any of the meal's types\r\n    for (var type of meal.type) {\r\n        if (type.toLowerCase().includes(filter)) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    // Check if the filter is any of the meal's categories\r\n    for (var category of meal.category) {\r\n        if (category.toLowerCase().includes(filter)) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    // Iterate through the meal's ingredients to see if any of the item names contain our filter keyword\r\n    for (var ingredient of meal.ingredients) {\r\n        if (ingredient.item.toLowerCase().includes(filter)) { \r\n            return true\r\n        }\r\n    }\r\n\r\n    // If the filter is in none of the above, return false\r\n    return false\r\n  }\r\n\r\n  // Gets the total number of a category in the calendar based upon rule data\r\n  getTotals(calendar, selector, rule) {\r\n\r\n    // Check if the selector is plural\r\n    var selectorIsPlural = selector.parameters.length > 1 || selector.parameters.includes(\"all\")\r\n\r\n    var total = 0\r\n    var totalEach = {}\r\n    selector.parameters.forEach((parameter) => {\r\n      if (selector.select == \"day\") {\r\n\r\n        // Iterate through each type on the calendar\r\n        Object.keys(calendar).forEach((type) => {\r\n\r\n          if (this.state.days[parameter] && calendar[type] && calendar[type][parameter] && Object.keys(calendar[type][parameter]).length > 2) {  // Check if their is an actual meal there\r\n            if (calendar[type][parameter].category.includes(rule.parameters.category)) {  // Check if the meal has the category that rule is matching for\r\n              if (selectorIsPlural) { \r\n                if (rule.parameters.for == \"all\") {   // Check if the rule is checking total for all parameters\r\n                  total++\r\n                } else {                              // Check if the rule is checking total for each of the parameters\r\n                  if (totalEach[parameter]) { \r\n                    totalEach[parameter]++\r\n                  } else {\r\n                    totalEach[parameter] = 1\r\n                  }                         \r\n                }\r\n              } else {\r\n                total++\r\n              }\r\n            }\r\n          }\r\n\r\n        })\r\n      } else {\r\n        if (calendar[parameter]) {\r\n          // Iterate through each day on the calendar given the type in the selector\r\n          Object.keys(calendar[parameter]).forEach((day) => {\r\n            if (this.state.days[day] && calendar[parameter] && calendar[parameter][day]  && Object.keys(calendar[parameter][day]).length != 1) {  // Check if their is an actual meal there\r\n              if (calendar[parameter][day].category.includes(rule.parameters.category)) { // Check if the meal has the category that the rule is matching for\r\n                if (selectorIsPlural) { \r\n                  if (rule.parameters.for == \"all\") {   // Check if the rule is checking total for all parameters\r\n                    total++\r\n                  } else {                              // Check if the rule is checking total for each of the parameters\r\n                    if (totalEach[parameter]) { \r\n                      totalEach[parameter]++\r\n                    } else {\r\n                      totalEach[parameter] = 1\r\n                    }                         \r\n                  }\r\n                } else {\r\n                  total++\r\n                }\r\n              }\r\n            }\r\n          })\r\n        }\r\n        \r\n      }\r\n    })\r\n\r\n    return [total, totalEach]\r\n  }\r\n\r\n  // Get the amount of repeats of a specified category before the current meal\r\n  getRepeats(calendar, selector, rule, mealType, mealDay) {\r\n    if (selector.select == \"day\") {\r\n\r\n      var typesBefore = this.state.types.slice(0,this.state.types.indexOf(mealType))  // Get the types before the current meal\r\n\r\n      var repeats = 0   // Int to keep track of the number of time that the category has been repeated in the mealDay\r\n\r\n      // Iterate through each type before the mealType for the mealDay specified\r\n      typesBefore.forEach((type) => {\r\n        if (this.state.days[mealDay] && calendar[type] && calendar[type][mealDay] && Object.keys(calendar[type][mealDay]).length != 1) {  // Check if their is an actual meal there\r\n          if (calendar[type][mealDay].category == rule.parameters.category) {  // Check if meal has category that we are checking for\r\n            repeats++\r\n          }\r\n        }\r\n      })\r\n\r\n      return repeats\r\n\r\n    } else {\r\n\r\n      // Get a ordered list of the days of week filtered out for days that aren't included on the calendar\r\n      var days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Satuday\"].filter((day) => {\r\n        return this.state.days[day]\r\n      })\r\n      var daysBefore = days.slice(0,days.indexOf(mealDay))  // Get the days before the current meal\r\n\r\n      var repeats = 0   // Int to keep track of the number of time that the category has been repeated in the mealType\r\n\r\n      // Iterate through each day before the mealDay for the mealType specified\r\n      daysBefore.forEach((day) => {\r\n        if (this.state.days[mealDay] && calendar[mealType] && calendar[mealType][day] && Object.keys(calendar[mealType][day]).length != 1) {  // Check if their is an actual meal there\r\n          if (calendar[mealType][day].category == rule.parameters.category) {  // Check if meal has category that we are checking for\r\n            repeats++\r\n          }\r\n        }\r\n      })\r\n\r\n      return repeats\r\n    }\r\n  }\r\n\r\n  // Determines whether or not a meal matches the rule and totals from the calendar\r\n  checkMealConditions(meal, rule, total) {\r\n    if (meal.category.includes(rule.parameters.category) && rule.parameters.condition == \"at most\") {     // Meal includes category and rule is \"at most\"\r\n      return total < rule.parameters.amount\r\n    } else if (rule.parameters.condition == \"at least\") {   // If rule condition is atleast, keep returning true for ONLY meals with category until the meal total matches the atleast\r\n      if (meal.category.includes(rule.parameters.category) && total < rule.parameters.amount) {           // Meal includes category and has a total that is less than the rules amount\r\n        return true\r\n      } else if (!meal.category.includes(rule.parameters.category) && total < rule.parameters.amount) {   // Meal doesn't include category and has a total that is less than the rules amount\r\n        return false \r\n      } else {\r\n        return true\r\n      }\r\n    } else if (rule.parameters.condition == \"exactly\") {  // If rule condition is exactly, keep returning true for ONLY meals with category until the meal total matches the exactly, then only return false for meals with that category\r\n      if (meal.category.includes(rule.parameters.category) && total < rule.parameters.amount) {           // Meal includes category and has a total that is less than the rules amount\r\n        return true\r\n      } else if (!meal.category.includes(rule.parameters.category) && total < rule.parameters.amount) {   // Meal doesn't include category and has a total that is less than the rules amount\r\n        return false \r\n      } else if (meal.category.includes(rule.parameters.category) && total >= rule.parameters.amount) {   // Meal includes category and has a total that is greater or equal to the rule amount\r\n        return false \r\n      } else {\r\n        return true\r\n      }\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  // Gets list of categories that are used in the meal list\r\n  getCategoriesPresent() {\r\n    var categories = []\r\n\r\n    // Iterate through each meal and add the category lists together\r\n    Object.keys(this.state.meals).forEach((mealname) => {\r\n      var meal = this.state.meals[mealname]\r\n      categories = categories.concat(meal.category)\r\n    })\r\n    \r\n    return categories\r\n  }\r\n\r\n  // Get a list of allowed meals for each cell in the calendar\r\n  getAllowedMeals(calendar, type, day) {\r\n\r\n    // Get a list of meals with the type provided and enabled in the meal selector\r\n    var mealsWithType = Object.keys(this.state.meals).filter(meal => this.state.meals[meal].type.includes(type) && this.state.meals[meal].enabled) \r\n    var allowedMeals = mealsWithType\r\n\r\n    // Iterate through the selectors in the current ruleset\r\n    var ruleset = this.state.rulesets[this.state.currentRuleset].slice() // Creates an exact copy of the array so when we change it, the changes won't show in CalendarRules\r\n    ruleset.forEach((selector) => {\r\n      var selector = jsonCopy(selector)\r\n      if (selector.parameters && this.mealSelected(selector, day, type)) {   // Check if the meal would be selected by the selector\r\n\r\n        if (selector.parameters.includes(\"all\")) {  // Convert the all parameter into a list of parameters\r\n          if (selector.select == \"day\") {\r\n            selector.parameters = Object.keys(this.state.days).filter((day) => {return this.state.days[day]})\r\n          } else {\r\n            selector.parameters = this.state.types\r\n          }\r\n        }\r\n\r\n        var categoriesPresent = this.getCategoriesPresent()  // Get a list of the categories present in meal selector so when the rule specifies \"all\" as the category we can find all of those categories\r\n\r\n        // Iterate through each rule in the selector\r\n        // Usually I'd use a forEach or for..of loop for something like this but selector.rules will be expanding while we iterate so we need to use a classic for loop here\r\n        for (var i = 0; i < selector.rules.length; i++) {  \r\n          var rule = Object.assign({}, selector.rules[i])     \r\n\r\n          // If the rule is a total or repeats and has a category as \"all\", add a identical rule for each category\r\n          if (rule.parameters && rule.rule != \"Filter\" && rule.parameters.category == \"all\" && !rule.new) {  \r\n\r\n            // Iterate through every category present \r\n            categoriesPresent.forEach((category) => {\r\n              var newRuleParameters = Object.assign({}, rule.parameters)  // Create a copy of the rule's parameter and change to the new category\r\n              newRuleParameters.category = category\r\n\r\n              selector.rules.push({   // Create a new identical rule but with that new category\r\n                rule: rule.rule,\r\n                parameters: newRuleParameters\r\n              })\r\n            })\r\n\r\n            selector.rules.splice(i, 1)  // Remove current rule with the \"all\" category and move to the next rule\r\n            continue\r\n          }\r\n\r\n          if (this.ruleIsValid(rule)) {     // Check if the rule isn't the new input rule or has any empty fields\r\n            \r\n            if (rule.rule == \"Filter\") {      // If the rule is a Filter\r\n                allowedMeals = allowedMeals.filter((mealname) => {   // Filter through each of the allowedMeals\r\n                  var meal = this.state.meals[mealname]\r\n                  var isFiltered = this.filterMeal(rule.parameters.filter.toLowerCase(), meal, mealname)\r\n                  if (rule.parameters.type == \"exclude\") {   // If the type is exclude, only return true for items that would not be filtered\r\n                    return !isFiltered\r\n                  } else {                        // If the type is apply, only return true for items that would be filtered\r\n                    return isFiltered\r\n                  }\r\n                })\r\n            } else if (rule.rule == \"Total\") {  // If the rule is a Total\r\n\r\n              var totals = this.getTotals(calendar, selector, rule) // Get totals\r\n              var total = totals[0]\r\n              var totalEach = totals[1]\r\n\r\n              var selectorIsPlural = selector.parameters.length > 1 || selector.parameters.includes(\"all\")\r\n\r\n              allowedMeals = allowedMeals.filter((mealname) => {   // Filter through each of the allowedMeals\r\n                var meal = this.state.meals[mealname]\r\n                \r\n                if (selectorIsPlural) {\r\n                  if (rule.parameters.condition == \"for\") {\r\n                    if (selector.select == \"day\") {\r\n                      return this.checkMealConditions(meal, rule, totalEach[day])\r\n                    } else {\r\n                      return this.checkMealConditions(meal, rule, totalEach[type])\r\n                    }\r\n                  } else {\r\n                    return this.checkMealConditions(meal, rule, total)\r\n                  }\r\n                } else {\r\n                  return this.checkMealConditions(meal, rule, total)\r\n                }\r\n                \r\n              })\r\n            } else if (rule.rule == \"Repeats\") {\r\n\r\n              var repeats = this.getRepeats(calendar, selector, rule, type, day)  // Get repeats\r\n\r\n              allowedMeals = allowedMeals.filter((mealname) => {  // Filter through each of the allowedMeals\r\n                var meal = this.state.meals[mealname]\r\n\r\n                if (rule.parameters.category == meal.category) {  // If the meal matches the rule's category than only allow it if its number of repeats is lower than the rule amount\r\n                  return rule.parameters.amount > repeats\r\n                } else {                                          // Otherwise just return true\r\n                  return true\r\n                }\r\n              })\r\n            }\r\n            \r\n          }\r\n        }\r\n      }\r\n    })\r\n    return allowedMeals\r\n  }\r\n\r\n  // Generates a JSON object of the calendar organized into types (the rows) and days (the columns)\r\ngenerateCalendar() {\r\n\r\n  // First fetch meal deta\r\n  this.setState({meals: this.props.getMeals()}, () => {\r\n    var calendar = {}\r\n\r\n    // Only generate if the calendar successfully retreived the list of types\r\n    if (this.state.types) {\r\n\r\n      // Iterate through each type\r\n      this.state.types.forEach(type => {\r\n        calendar[type] = {}\r\n\r\n        // Iterate through each day\r\n        Object.keys(this.state.days).forEach(day => {\r\n\r\n          // Get a list of meals that are allowed based upon the meal's day, type, and the ruleset rules\r\n          var allowedMeals = this.getAllowedMeals(calendar, type, day)\r\n          try {   // Error handling, if we reference a type and day that does not exist, than proceed to the catch\r\n\r\n            // Check if a already meal exists in the calendar JSON\r\n            if ((this.state.days[day] && Object.keys(this.state.calendar[type][day]).length != 1) || this.state.calendar[type][day].noGen) {\r\n              var mealname = allowedMeals[Math.floor(Math.random() * allowedMeals.length)]  // Get random meal\r\n              var meal = this.state.meals[mealname]\r\n\r\n              if (meal) {   // If the random meal is not undefined\r\n                meal[\"name\"] = mealname\r\n                meal[\"hovered\"] = false\r\n                meal[\"mealexists\"] = true\r\n\r\n                if (meal.ingredients) {   // Check that the meal has ingredients\r\n\r\n                  // Iterate through each ingredient and convert quantities based on the overallServings number\r\n                  meal.ingredients = meal.ingredients.map(ingredient => { \r\n                      if (ingredient[\"num\"] != -1) {\r\n                          ingredient[\"num\"] = (ingredient[\"num\"] / meal.servings) * parseInt(this.state.overallServings)\r\n                      }\r\n                      return ingredient\r\n                  })\r\n                  meal[\"servings\"] = this.state.overallServings // Apply the overall servings to the meal's servings\r\n\r\n                }\r\n\r\n                calendar[type][day] = meal   \r\n              } else if (allowedMeals.length == 0) {  // If their is a calendar cell that exists but it cannot be generated because the rules do not permit it, add a noGen property\r\n                calendar[type][day] = {\"noGen\": true}\r\n              } else {                                // If their is no meal but not because there are none that can be generated, set mealexists to fakse\r\n                calendar[type][day] = {\"mealexists\": false}\r\n              }\r\n            } else if (Object.keys(this.state.calendar[type][day]).length == 1 && this.state.calendar[type][day].mealexists) {  // If the meal exists and the cell exists than set mealexists to true\r\n              calendar[type][day] = {\"mealexists\": true}\r\n            } else {    // Otherwise set to false\r\n              calendar[type][day] = {\"mealexists\": false}\r\n            }\r\n          } catch (e) {   // If the calendar cell is undefined\r\n            var mealname = allowedMeals[Math.floor(Math.random() * allowedMeals.length)]  // Get random meal\r\n            var meal = this.state.meals[mealname]\r\n\r\n            if (meal) {   // If the meal is valid\r\n              meal[\"name\"] = mealname\r\n              meal[\"hovered\"] = false\r\n              meal[\"mealexists\"] = true\r\n\r\n              // Iterate through each ingredient and convert quantities based on the overallServings number\r\n              if (meal.ingredients) {\r\n                meal.ingredients = meal.ingredients.map(ingredient => {\r\n                    if (ingredient[\"num\"] != -1) {\r\n                        ingredient[\"num\"] = (ingredient[\"num\"] / meal.servings) * parseInt(this.state.overallServings)\r\n                    }\r\n                    return ingredient\r\n                })\r\n                meal[\"servings\"] = this.state.overallServings // Apply the overall servings to the meal's servings\r\n              }\r\n              calendar[type][day] = meal   \r\n            } else if (allowedMeals.length == 0) {  // If their is a calendar cell that exists but it cannot be generated because the rules do not permit it, add a noGen property\r\n              calendar[type][day] = {\"noGen\": true}\r\n            } else {\r\n              calendar[type][day] = {\"mealexists\": false} // If their is no meal but not because there are none that can be generated, set mealexists to fakse\r\n            }\r\n          }\r\n        })\r\n      })\r\n      this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)}, () => {\r\n        this.updateData()\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n  // Gets a simplified version of the JSX for the calendar for printing and exporting\r\n  getCalendarExport() {\r\n    var calendar = this.state.calendar\r\n    var result = []\r\n\r\n    // If the calendar has type\r\n    if (this.state.types) {\r\n\r\n      // Iterate through each type\r\n      this.state.types.forEach(type => {\r\n        var row = new Array(7)  // Create an empty row array\r\n\r\n        // Iterate through each day\r\n        Object.keys(this.state.days).forEach(day => {\r\n          var meal = {}\r\n          if (type){\r\n            if (!calendar[type]) {\r\n              row[i] = (\r\n                <th class=\"empty\">\r\n                </th>\r\n              )\r\n              return\r\n            }\r\n            var meal = calendar[type][day]\r\n          }\r\n\r\n          // Get the index of the day so we can put the day columns in order\r\n          var i = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"].indexOf(day)\r\n          if (!meal) {\r\n            row[i] = (\r\n              <th class=\"empty\">\r\n              </th>\r\n            )\r\n            return\r\n          }\r\n\r\n          // Get a meal cell \r\n          if (this.state.days[day] && Object.keys(meal).length > 1) {\r\n            row[i] = (\r\n              <th class=\"mealcellExport\">\r\n                <div class=\"celltextExport\"><a class=\"meallinkExport\" href={meal.url} target=\"_blank\">{meal.name}</a></div>\r\n              </th>\r\n            )\r\n          } else {\r\n            // Get meal buttons\r\n            row[i] = (\r\n              <th class=\"empty\">\r\n                <img src={greenCheckmark} class=\"emptyCheckmark\" style={this.state.days[day] && type && meal[\"mealexists\"] ? {display: \"block\"} : {\"display\": \"none\"} }></img>\r\n              </th>\r\n            )\r\n          }\r\n          \r\n        })\r\n        if (type) {   // If the type exists create a row for it\r\n          row.unshift(\r\n            <th>\r\n              <span class=\"typeInputExport\">{type}</span>\r\n            </th>\r\n          )\r\n        } else {\r\n          row.unshift(\r\n            <th class=\"vertInputCell\">\r\n              <span class=\"typeInput\"></span>\r\n            </th>\r\n          )\r\n        }\r\n        \r\n        result.push(\r\n          <tr class=\"mealrowExport\">{row}</tr>\r\n        )\r\n      })\r\n    }\r\n\r\n    return (    // Format the simplified calendars\r\n      <div class=\"w3-card-4 w3-margin w3-border-2021-illuminating\" id=\"calendarExport\">\r\n        <div id=\"header\" style={{height: \"50px\"}}>\r\n          <h3 style={{display: \"inline\"}}>Calendar</h3>\r\n        </div>\r\n        <div id=\"calendarbody\">\r\n          <table>\r\n            <tr id=\"row1\">\r\n              <th style={{\"background-color\": \"#969696\"}}></th><th>Sunday</th><th>Monday</th><th>Tuesday</th><th>Wednesday</th><th>Thursday</th><th>Friday</th><th>Saturday</th>\r\n            </tr>\r\n            {result}\r\n          </table>\r\n        </div>\r\n        <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Gets the calendar JSX\r\n  getCalendar(calendar) {\r\n    var result = []\r\n\r\n    // If the calendar has any types\r\n    if (this.state.types) {\r\n\r\n      // Iterate through each type\r\n      this.state.types.forEach(type => {\r\n        var row = new Array(7)  // Create an empty array for the row\r\n\r\n        // Iterate through each day\r\n        Object.keys(this.state.days).forEach(day => {\r\n          var meal = {}\r\n          if (type){\r\n            if (!calendar[type]) {\r\n              row[i] = (\r\n                <th class=\"empty\" onDragOver={() => draggedTo = [type,day]}>\r\n                </th>\r\n              )\r\n              return\r\n            }\r\n            var meal = calendar[type][day]\r\n          }\r\n\r\n          // Get the index of the day so we can put the day columns in order\r\n          var i = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"].indexOf(day)\r\n          if (!meal) {\r\n            row[i] = (\r\n              <th class=\"empty\" onDragOver={() => draggedTo = [type,day]}>\r\n              </th>\r\n            )\r\n            return\r\n          }\r\n\r\n          // Get a meall cell\r\n          if (this.state.days[day] && Object.keys(meal).filter((property) => property != \"checked\").length > 1) {\r\n            row[i] = (\r\n              <th class=\"mealcell\" onClick={() => this.props.fillEditor(meal.name,\"calendar\")} onDragOver={() => draggedTo = [type,day]} onDragStart={() => draggedFrom = [type,day]}>\r\n                <img class=\"mealimage cellimage\" src={meal.image} draggable=\"false\"></img>\r\n                <div class=\"celltext\"><a class=\"meallink\" href={meal.url} target=\"_blank\">{meal.name}</a></div>\r\n                <div class=\"deleteMeal\" onClick={() => this.deleteMeal(type,day)}>✕</div>\r\n                <img class=\"reloadMeal\" src={reloadblue} onClick={() => this.reloadMeal(type,day)} draggable=\"false\"></img>\r\n                <img class=\"dragMeal\" src={hamburger} draggable=\"false\"></img>\r\n                <div class=\"cellservings\"><input class=\"numservings\" ondrop=\"return false;\" type=\"number\" min=\"1\" onChange={(event) => this.changeMealServings(event, type,day)} value={meal.servings}></input> <div class=\"numservingstext\">Servings</div></div>\r\n              </th>\r\n            )\r\n          } else {  // Get a empty meal cell\r\n            row[i] = (\r\n              <th class=\"empty\" onDragOver={() => draggedTo = [type,day]} >\r\n                <img src={greenCheckmark} class=\"emptyCheckmark\" onClick={() => this.reloadMeal(type,day)} style={this.state.days[day] && type && meal[\"mealexists\"] ? {display: \"block\"} : {\"display\": \"none\"} }></img>\r\n              </th>\r\n            )\r\n          }\r\n          \r\n        })\r\n\r\n        // Get a type row \r\n        if (type) {\r\n          row.unshift(\r\n            <th class=\"typeRow\" onDragStart={() => draggedFromType = type} onDragOver={() => draggedToType = type}>\r\n              <span class=\"typeInput\"><input type=\"text\" style={{width: '70px', \"text-align\": \"center\"}} onChange={(event) => this.typeNameChange(event, type)} value={type}></input></span>\r\n              <div class=\"deleteMeal\" onClick={() => this.deleteRow(type)}>✕</div>\r\n              <img class=\"reloadRow\" src={reloadblue} onClick={() => this.reloadRow(type)} draggable=\"false\"></img>\r\n              <img class=\"dragMeal\" src={hamburger} draggable=\"false\"></img>\r\n            </th>\r\n          )\r\n        } else {  // Get an empty type row\r\n          row.unshift(\r\n            <th class=\"vertInputCell\">\r\n              <span class=\"typeInput\"><input type=\"text\" style={{width: '70px', \"text-align\": \"center\"}} onChange={(event) => this.typeNameChange(event, type)}></input></span>\r\n              <div class=\"deleteMeal\" onClick={() => this.deleteRow(type)}>✕</div>\r\n              <img class=\"reloadRow\" src={reloadblue} draggable=\"false\"></img>\r\n              <img class=\"dragMeal\" src={hamburger} draggable=\"false\"></img>\r\n            </th>\r\n          )\r\n        }\r\n        \r\n        result.push(\r\n          <tr class=\"mealrow\">{row}</tr>\r\n        )\r\n      })\r\n    }\r\n\r\n    // Formatting has created an empty margin at the bottom of the page, so the window height is fixed. So, when calendar height changes, we must change the height of the window.\r\n    document.getElementById(\"root\").style.height = 875 + this.state.types.length*90 + \"px\"\r\n    this.updateData()\r\n\r\n    return result\r\n  }\r\n\r\n  // Changes the name of a type\r\n  typeNameChange(event, type) {\r\n    var value = event.target.value\r\n\r\n    var types = this.state.types\r\n    var calendar = this.state.calendar\r\n    var index = types.indexOf(type)\r\n\r\n    // Only update name if it doesn't have the word \"handle\" in it, when dragging types, sometimes the row element can be dragged into the input field, where the word \"handle\" will be added\r\n    if (!value.includes(\"handle\")) {\r\n      types[index] = value                // Update type list\r\n      calendar[value] = calendar[type]    // Create a new calendar property after the new type\r\n      delete calendar[type]               // Delete the old type property\r\n\r\n      this.setState({types: types}, () => {\r\n        this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)}, ()=> {\r\n          this.updateData()\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // Generates a meal/reloads it given a type and day\r\n  reloadMeal(type, day) {\r\n\r\n    // Fetch the meal list from the meal selector\r\n    this.setState({meals: this.props.getMeals()}, () => {\r\n      var allowedMeals = this.getAllowedMeals(this.state.calendar, type, day)        // Get a list of meals that can fit the type, day, and rule restrictions\r\n      var mealname = allowedMeals[Math.floor(Math.random() * allowedMeals.length)]  // Get random meal\r\n      var meal = this.state.meals[mealname]\r\n      var calendar = this.state.calendar\r\n      \r\n      if (meal) {   // If the meal is valid\r\n        meal[\"name\"] = mealname\r\n        meal[\"hovered\"] = false\r\n        meal[\"mealexists\"] = true\r\n\r\n        // If the meal has ingredients, convert each ingredient amount to match the overallServings\r\n        if (meal.ingredients) {\r\n          // Iterate through each ingredient\r\n          meal.ingredients = meal.ingredients.map(ingredient => {\r\n              if (ingredient[\"num\"] != -1) {    // If the ingredient has an amount, convert the servings to the overallServings\r\n                  ingredient[\"num\"] = (ingredient[\"num\"] / meal.servings) * parseInt(this.state.overallServings)\r\n              }\r\n              return ingredient\r\n          })\r\n          meal[\"servings\"] = this.state.overallServings\r\n        }\r\n        calendar[type][day] = meal   \r\n\r\n      } else if (allowedMeals.length == 0) {    // If the rules don't allow for the meal's existence, make it no gen\r\n        calendar[type][day] = {\"noGen\": true}\r\n      } else {\r\n        calendar[type][day] = {\"mealexists\": false}\r\n      }\r\n\r\n      this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)})\r\n    })\r\n  }\r\n\r\n  // Triggered on reload button on a row, reloads each meal in a row\r\n  reloadRow(type) {\r\n\r\n    // Get meal data first\r\n    this.setState({meals: this.props.getMeals()}, () => {\r\n      var calendar = this.state.calendar\r\n      \r\n      // Iterate through each meal and reload it\r\n      Object.keys(calendar[type]).forEach(day => {\r\n        this.reloadMeal(type, day)\r\n      })\r\n\r\n      this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)}, () => {\r\n        this.updateData()\r\n      })\r\n    })\r\n  }\r\n\r\n  // Deletes a meal by overriding its contents with a mealexists propety\r\n  deleteMeal(type, day) {\r\n    var calendar = this.state.calendar\r\n    calendar[type][day] = {\"mealexists\": true}\r\n    this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)})\r\n  }\r\n\r\n  // Deletes an entire row by removing the type from the types list and deleting the type property from the calendar\r\n  deleteRow(type, day) {\r\n    var types = this.state.types\r\n    var calendar = this.state.calendar\r\n\r\n    if (types.length == 1) {  // Prevents user from completing deleting all types\r\n      return\r\n    }\r\n\r\n    // Delete type from types list by filtering it out, deletes type property from calendar\r\n    types = types.filter(e => e != type)\r\n    delete calendar[type]\r\n\r\n    this.setState({types: types}, () => {\r\n      this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)}, () => {\r\n        this.updateData()\r\n      })\r\n    })\r\n  }\r\n\r\n  // Adds a new row in the calendar\r\n  addType() {\r\n    var types = this.state.types\r\n    var calendar = this.state.calendar\r\n\r\n    // Add a new type \"null\" with empty data for each day\r\n    types.push(null)\r\n    calendar[null] = {\"Sunday\":{},\"Monday\":{},\"Tuesday\":{},\"Wednesday\":{},\"Thursday\":{},\"Friday\":{},\"Saturday\":{}}\r\n\r\n    this.setState({types: types}, () => {\r\n      this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)})\r\n    })\r\n  }\r\n\r\n  // Updates the overallServings of the calendar when their is a change in the input field\r\n  overallServingsUpdate(event) {\r\n    this.setState({overallServings: event.target.value})\r\n  }\r\n\r\n  // Triggered on change to the servings input field in a meal cell, adjust ingredient quantities\r\n  changeMealServings(event, type,day) {\r\n    var calendar = this.state.calendar\r\n    if (calendar[type][day].ingredients) {\r\n\r\n      // Iterate through each ingredient\r\n      calendar[type][day].ingredients = calendar[type][day].ingredients.map(ingredient => {\r\n          if (ingredient[\"num\"] != -1) {    // If the ingredient has a number, convert the number to match the new servings\r\n              ingredient[\"num\"] = (ingredient[\"num\"] / calendar[type][day].servings) * parseInt(event.target.value)\r\n          }\r\n          return ingredient\r\n      })\r\n\r\n      calendar[type][day].servings = event.target.value\r\n    }\r\n    this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)})\r\n  }\r\n\r\n  // Triggered after render, sets up dragging behavior of rows and cells\r\n  componentDidUpdate() {\r\n\r\n    // Iterates through each meal cell\r\n    Array.from(document.getElementsByClassName(\"mealcell\")).forEach(draggable => {\r\n      var handle = draggable.getElementsByClassName(\"dragMeal\")[0]  // Gets the DOM for the handle in the cell\r\n      var target = false\r\n\r\n      handle.onmousedown = function(e) {  // If handle is clicked, make the meal cell draggable\r\n          e.target.parentNode.setAttribute('draggable', 'true')\r\n      }\r\n\r\n      handle.onmouseup = function(e) {    // If handle is not clicked, make the meal cell not draggable\r\n          e.target.parentNode.setAttribute('draggable', 'false')\r\n      }\r\n\r\n      // When an element is dropped\r\n      draggable.ondragend = (e) => {\r\n        e.target.setAttribute('draggable', 'false') // Make the element not draggable again\r\n\r\n        var calendar = this.state.calendar\r\n\r\n        // Check if the meal we are dragging to is not empty\r\n        if (Object.keys(calendar[draggedTo[0]][draggedTo[1]]).length > 2) {\r\n\r\n          // Swap elements\r\n          var temp = calendar[draggedFrom[0]][draggedFrom[1]]\r\n          calendar[draggedFrom[0]][draggedFrom[1]] = calendar[draggedTo[0]][draggedTo[1]]\r\n          calendar[draggedTo[0]][draggedTo[1]] = temp\r\n\r\n          this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)}, () => {\r\n            this.updateData()\r\n          })\r\n        }\r\n      }\r\n    })\r\n    \r\n    // Iterates through each meal row\r\n    Array.from(document.getElementsByClassName(\"mealrow\")).forEach(draggable => {\r\n      var handle = draggable.getElementsByClassName(\"dragMeal\")[0]  // Get the meal row handle\r\n      var target = false\r\n\r\n      handle.onmousedown = function(e) {  // If handle is clicked, make the meal row draggable\r\n          e.target.parentNode.setAttribute('draggable', 'true')\r\n      }\r\n\r\n      handle.onmouseup = function(e) {    // If handle is not clicked, make the meal row not draggable\r\n          e.target.parentNode.setAttribute('draggable', 'false')\r\n      }\r\n\r\n      // When element is dropped\r\n      draggable.ondragend = (e) => {\r\n        e.target.setAttribute('draggable', 'false')   // Make dragging false again\r\n\r\n        if (draggedFromType && draggedToType) {\r\n          var types = this.state.types\r\n\r\n          // Get the indexes of the types so we can manipulate them in the list\r\n          var fromIndex = types.indexOf(draggedFromType)\r\n          var toIndex = types.indexOf(draggedToType)\r\n\r\n          if (fromIndex > toIndex) {    // If dragging element from down to top, put from element before to element\r\n            types.splice(toIndex, 0, types[fromIndex])\r\n            types.splice(fromIndex+1, 1)\r\n          } else {                      // If dragging element from top to down, put from element after to element\r\n            types.splice(toIndex+1, 0, types[fromIndex])\r\n            types.splice(fromIndex, 1)\r\n          }\r\n          \r\n          // Reset drag types\r\n          draggedFromType = \"\"\r\n          draggedToType = \"\"\r\n  \r\n          this.setState({types: types}, () => {\r\n            this.setState({\"calendarJSX\": this.getCalendar(this.state.calendar)}, () => {\r\n              this.updateData()\r\n            })\r\n          })\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  // Toggles a day when the day button is clicked on the bottom\r\n  toggleDay(day) {\r\n    var days = this.state.days\r\n    days[day] = !days[day]  // Toggles day boolean\r\n\r\n    if (days[day]) {    // If the day is true\r\n\r\n      // Go through each type in the day and relaod it\r\n      Object.keys(this.state.calendar).forEach(type => {\r\n        this.reloadMeal(type,day)\r\n      })\r\n\r\n      this.setState({days: days}, () => {\r\n        this.setState({\"calendarJSX\": this.getCalendar(this.state.calendar)})\r\n      })\r\n    } else {            // If the day is false\r\n      var calendar = this.state.calendar\r\n      \r\n      // Go through each type in the day and set it so it doesn't exist\r\n      Object.keys(calendar).forEach(type => {\r\n        calendar[type][day] = {\"mealexists\":false}\r\n      })\r\n\r\n      this.setState({days: days, calendar: calendar}, () => {\r\n        this.setState({\"calendarJSX\": this.getCalendar(this.state.calendar)}, () => {\r\n          this.updateData()\r\n        })\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  // Applies the overallServings number to all meals in the calendar\r\n  applyServingsOverride() {\r\n    var calendar = this.state.calendar\r\n\r\n    // Iterate through each cell by going to each type and day\r\n    this.state.types.forEach(type => {\r\n      Object.keys(this.state.days).forEach(day => {\r\n\r\n        if (Object.keys(calendar[type][day]).length > 1) {  // If the meal cell is populated with a meal\r\n          if (calendar[type][day].ingredients) {            // ...and the meal cell has ingredients\r\n\r\n            // Iterate through each ingredient in the meal\r\n            calendar[type][day].ingredients = calendar[type][day].ingredients.map(ingredient => {\r\n\r\n                // If the ingredient has a number convert it based on the new servings\r\n                if (ingredient[\"num\"] != -1) {\r\n                    ingredient[\"num\"] = (ingredient[\"num\"] / calendar[type][day].servings) * parseInt(this.state.overallServings)\r\n                }\r\n                return ingredient\r\n            })\r\n\r\n          }\r\n          calendar[type][day].servings = this.state.overallServings\r\n        }\r\n\r\n      })\r\n    })\r\n    this.setState({calendar: calendar, \"calendarJSX\": this.getCalendar(calendar)})\r\n  }\r\n\r\n  // Triggered on edit ruleset button click, communicates with CalendarRules to send data and display the window\r\n  editRules() {\r\n    this.props.showCalendarRules(this.state.rulesets, this.state.currentRuleset, this.state.days, this.state.types)\r\n  }\r\n\r\n  // Called when the calendar is first rendered\r\n  componentDidMount() { \r\n    if (this.props.hadSignedUp) {   // If the user is signed in, generate the calendar\r\n      this.getData(() => {\r\n        this.props.getMeals((meals) => {\r\n          this.generateCalendar()\r\n          this.props.calendarLoaded()\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // Called when the calendar receives parameters from the application\r\n  componentWillReceiveProps() {\r\n\r\n    // Get data from the server\r\n    this.getData(() => {\r\n      this.props.getMeals((meals) => {  // Get meal data\r\n        if (this.state.calendar[\"default\"]) { // If calendar data is empty generate new calendar\r\n          this.generateCalendar()\r\n        } else {                              // If calendar data is full get the JSX for the calendar\r\n          this.setState({\"calendarJSX\": this.getCalendar(this.state.calendar)})\r\n        }\r\n        this.props.calendarLoaded()   // Communicate with other components to populate\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    // Iterate through each day and add either a check button or X button at the bottom\r\n    var buttons = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"].map(day => {\r\n      if (this.state.days[day]) { \r\n        return (<th style={{\"background-color\": \"#f0756e\", \"color\": \"white\"}} onClick={() => this.toggleDay(day)}>✖</th>)}\r\n      else { \r\n        return (<th style={{\"background-color\":\"#60cc6c\"}} onClick={() => this.toggleDay(day)}><img class=\"check\" src={checkmark}></img></th>) \r\n      }\r\n    })\r\n    buttons.unshift(<th style={{\"background-color\": \"white\"}} onClick={this.addType}><img style={{\"height\": \"15px\", \"width\": \"15px\"}}src={plus}></img></th>)\r\n\r\n    var rulesetOptions = []\r\n\r\n    // If there are rulesets than add each ruleset as an option in the select\r\n    if (this.state.rulesets.length > 0) {\r\n        var i = -1\r\n\r\n        // Iterate through each ruleset and add an option for the ruleset dropdown\r\n        rulesetOptions = this.state.rulesets.map((ruleset) => {\r\n            i++\r\n\r\n            return (\r\n                <option value={i}>{\"Ruleset \" + (i+1)}</option>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (  // Format calendar\r\n      <div class=\"w3-card-4 w3-margin w3-border-2021-illuminating\" id=\"calendar\">\r\n        <div id=\"header\" style={{height: \"50px\"}}>\r\n          <h3 style={{display: \"inline\"}}>Calendar</h3>\r\n          <span id=\"servingsOverride\">Plan for <input id=\"servingsOverrideInput\" type=\"number\" min=\"1\" onChange={this.overallServingsUpdate} value={this.state.overallServings}></input> servings.</span>\r\n          <button id=\"servingsApply\" onClick={this.applyServingsOverride}>Apply</button>\r\n          <button class=\"reloadButton\" onClick={this.generateCalendar}><img id=\"reloadIcon\" src={reload}></img></button>\r\n          <button class=\"exportButton\" onClick={() => this.props.showExport(this.getCalendarExport())}><img id=\"exportIcon\" src={exportIcon}></img></button>\r\n          <button class=\"editRulesButton\" onClick={this.editRules}><img id=\"editRulesIcon\" src={editRulesIcon}></img></button>\r\n          <select id=\"calendarRulesetSelector\" value={this.state.currentRuleset} onChange={this.changeCurrentRuleset}>\r\n            {rulesetOptions}\r\n          </select>\r\n        </div>\r\n        <div id=\"calendarbody\">\r\n          <table id=\"calendartable\">\r\n            <tr id=\"row1\">\r\n              <th style={{\"background-color\": \"#969696\"}}></th><th>Sunday</th><th>Monday</th><th>Tuesday</th><th>Wednesday</th><th>Thursday</th><th>Friday</th><th>Saturday</th>\r\n            </tr>\r\n            {this.state.calendarJSX}\r\n            <tr id=\"row1\">\r\n              {buttons}\r\n            </tr>\r\n          </table>\r\n        </div>\r\n        <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n          <div id=\"savedAutomatically\">Saved Automatically</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Calendar","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Meal.js",["197","198","199","200"],"/* \r\nThis is class for the meal listings within the meal selector, this class is responsible for:\r\n1. Displaying meal information for one meal\r\n2. Communicating with the meal selector when the meal is clicked or toggled\r\n*/\r\n\r\n// React Native imports and css\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\n\r\n// Meal class\r\nclass Meal extends React.Component {\r\n  constructor(props) {\r\n      super(props)\r\n\r\n      // Class methods must be binded in React\r\n      this.stripText = this.stripText.bind(this)\r\n  }\r\n\r\n  // Function to cut off text at a certain character count\r\n  stripText(text, n) {\r\n    if (text.length > n) {\r\n        return text.slice(0,n-3) + \"...\"\r\n    } else {\r\n        return text\r\n    }\r\n  }\r\n\r\n  // Render function, called whenever the calendar renders a meal\r\n  render() {\r\n    return (  // Formatting for the meal data\r\n      <div class=\"meal\" onClick={this.props.onClick} style={(this.props.name == this.props.selectedMeal) ? {\"background-color\": \"#ccc\"} : {}}>\r\n          <div class=\"data1\">\r\n            <img class=\"mealimage\" src={this.props.data.image} draggable=\"false\"></img>\r\n            <a class=\"meallink\" href={this.props.data.url} target=\"_blank\"><span class=\"mealname\">{this.stripText(this.props.name,45)}</span></a>\r\n          </div>\r\n          <div class=\"type\">\r\n            <div>{this.stripText(this.props.data.type[0],10)}</div>\r\n          </div>\r\n          <div class=\"category\">\r\n            <div>{this.stripText(this.props.data.category[0],10)}</div>\r\n          </div>\r\n          <label class=\"switch\">\r\n            <input type=\"checkbox\" checked={this.props.data.enabled} onChange={(e) => this.props.enabled(e, this.props.name)}></input>\r\n            <span class=\"slider round\"></span>\r\n        </label>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Meal;",["201","202"],"C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\ShoppingList.js",["203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],"/* \r\nThis is the class for the Shopping List window, it is responsible for:\r\n1. Pulling ingredients from the calendar\r\n2. Adding ingredients together\r\n3. Displaying ingredients into a list\r\n*/\r\n\r\n// Imports for React native and css\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\n\r\n// Import icons\r\nimport reload from '../icons/reload.png'\r\nimport exportIcon from \"../icons/export.png\"\r\n\r\n// Jquery for sending ingredient data to the server and AES to encrypt/decrypt\r\nimport $ from \"jquery\"\r\nvar aesjs = require('aes-js');\r\n\r\nvar domain = \"http://127.0.0.1:3000\"\r\n\r\n// Fraction parallel lists for converting decimals to unicode fractions and comparing them\r\nvar fractions = [1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 2/5, 3/5, 4/5, 1/6, 5/6, 1/8, 3/8, 5/8, 7/8]\r\nvar fractionsUnicode = [\"½\", \"⅓\", \"⅔\", \"¼\", \"¾\", \"⅕\", \"⅖\", \"⅗\", \"⅘\", \"⅙\", \"⅚\", \"⅛\", \"⅜\", \"⅝\", \"⅞\"]\r\nfunction isFractionEqual(num, fraction) {\r\n    return (num % 1).toFixed(7).slice(0,-1) == (fraction).toFixed(7).slice(0,-1)\r\n}\r\n\r\n// Helper function to retreive the user token which is stored as a cookie\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for(var i = 0; i <ca.length; i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0) == ' ') {\r\n        c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\n// Takes in an integer and returns a 128-bit array to be used as a key for AES\r\nfunction generate128BitKey(s) {\r\n    var key = []\r\n    for (var i = 0; i < 16; i++) {  // If s is 15 then the array will be: [15, 16, 17, 18, 19...]\r\n        key.push(s + i)\r\n    }\r\n    return key\r\n}\r\n\r\n// Encrypts string using s as a key and AES as the cipher\r\nfunction aesEncrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Converting our text into to bytes\r\n    var textBytes = aesjs.utils.utf8.toBytes(str);\r\n\r\n    // Encyrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n    var encryptedBytes = aesCtr.encrypt(textBytes)\r\n\r\n    // Converting back to text for easy handling in communication\r\n    var finalResult = aesjs.utils.hex.fromBytes(encryptedBytes)\r\n    return finalResult\r\n}\r\n\r\n// Decrypts string using s as a key and AES as the cipher\r\nfunction aesDecrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Convert our string back to bytes\r\n    var encryptedBytes = aesjs.utils.hex.toBytes(str);\r\n\r\n    // Decrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\r\n    var decryptedBytes = aesCtr.decrypt(encryptedBytes);\r\n\r\n    // Convert our bytes back into text\r\n    var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\r\n    return decryptedText\r\n}\r\n\r\n// Class for shopping list\r\nclass ShoppingList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // Class properties for storing the shopping list, the days to include in the shopping list\r\n        this.state = {ingredients: [], checklistDays: {\"Sunday\":true,\"Monday\":true,\"Tuesday\":true,\"Wednesday\":true,\"Thursday\":true,\"Friday\":true,\"Saturday\":true}}\r\n\r\n        // In React we must bind functions \r\n        this.getIngredients =           this.getIngredients.bind(this)\r\n        this.addIngredients =           this.addIngredients.bind(this)\r\n        this.applyAll =                 this.applyAll.bind(this)\r\n        this.checkDay =                 this.checkDay.bind(this)\r\n        this.exportList =               this.exportList.bind(this)\r\n        this.toggleIngredient =         this.toggleIngredient.bind(this)\r\n        this.removeIngredient =         this.removeIngredient.bind(this)\r\n    }\r\n\r\n    // Converts the shopping list to a more simplified version for printing\r\n    exportList() {\r\n\r\n        // Iterate through each ingredient\r\n        var ingredients = this.state.ingredients.map(ingredient => {\r\n            var text = \"\";\r\n            if (ingredient.num > 0) {   // If there is a number (its not -1)\r\n                for (var i = 0; i < fractions.length; i++) {                    // Convert any decimal fractions to unicode fractions\r\n                    if (isFractionEqual(ingredient.num, fractions[i])) { \r\n                        text += fractionsUnicode[i] + \" \"\r\n                        break\r\n                    }\r\n                } \r\n                if (text.length > 0 && Math.floor(ingredient.num) > 0) {    // If there is a unicode fraction and there is a remainder add the together\r\n                    text = Math.floor(ingredient.num) + text\r\n                } \r\n                if (text.length == 0) {                                     // Round decimals to two digits after the decimal point\r\n                    text += Math.round(ingredient.num * 100) / 100 + \" \"\r\n                }\r\n            }\r\n            if (ingredient.unit)        { text += ingredient.unit + \" \" }       // If there is a unit, add it\r\n            if (ingredient.specifier)   { text += ingredient.specifier + \" \"}   // If there is a specifier, add it\r\n            text += ingredient.item\r\n            return (\r\n                <div class=\"ingredientExport\">\r\n                    <input class=\"ingredientCheckbox\" type=\"checkbox\" checked={ingredient.checked} onChange={(e) => this.toggleIngredient(i)}></input>\r\n                    <span >{text}</span>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        // If there is no ingredients, add a text saying there are no ingredients\r\n        if (ingredients.length == 0) {\r\n            ingredients.push(\r\n                <div id=\"noIngredients\">\r\n                    <i style={{color: \"#ccc\"}}>There are no meals on your calendar.</i>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (ingredients.length > 32 && ingredients.length <= 64) {  // If there is between 32 and 64 ingredients, format export ingredients into two columns\r\n            var ingredients1 = ingredients.slice(0,Math.floor(ingredients.length/2))    // Get first half of ingredients\r\n            var ingredients2 = ingredients.slice(Math.floor(ingredients.length/2)+1)    // Get second half of ingredients\r\n\r\n            this.props.showExport ( // Send export to the export window\r\n                <div>\r\n                    <div id=\"listCol1\">{ingredients1}</div>\r\n                    <div id=\"listCol2\">{ingredients2}</div>\r\n                </div>\r\n            )\r\n        } else if (ingredients.length > 64) {                       // If there is any more than 64 ingredients, format into one column\r\n            console.log(\"num 2\")\r\n            var ingredients1 = ingredients.slice(0,Math.floor(ingredients.length/3))    // Get first third\r\n            var ingredients2 = ingredients.slice(Math.floor(ingredients.length/3)+1,2*Math.floor(ingredients.length/3)) // Get second third\r\n            var ingredients3 = ingredients.slice(2*Math.floor(ingredients.length/3)+1)  // Get the last thid\r\n\r\n            this.props.showExport ( // Send export to the export window\r\n                <div>\r\n                    <div id=\"listCol1\">{ingredients1}</div>\r\n                    <div id=\"listCol2\">{ingredients2}</div>\r\n                    <div id=\"listCol3\">{ingredients3}</div>\r\n                </div>\r\n            )\r\n        } else {\r\n            this.props.showExport ( // Just send the ingredients back in one column if there are less than 32 ingredients\r\n                <div>\r\n                    <div id=\"listCol1\">{ingredients}</div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    // Send shopping list data back to the server to be saved\r\n    updateData() {\r\n        // Send post request to the /set_data listener\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/set_data\",\r\n            // Sends session id, user id, and the encrypted shopping list to the server\r\n            data: JSON.stringify({ \r\n                sessionID: this.props.sessionID, \r\n                uid: getCookie(\"token\"), \r\n                shoppinglist: aesEncrypt(JSON.stringify(this.state.ingredients),this.props.secret), \r\n            }),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\"\r\n        });\r\n    }\r\n\r\n    // Called when a day checkbox is checked, toggles that checkbox and updates the shopping list\r\n    checkDay(event, day) {\r\n        var checklistDays = this.state.checklistDays    // Make copy of the checklist days data and edit it to the updated value\r\n        checklistDays[day] = event.target.checked\r\n\r\n        this.setState({checklistDays: checklistDays}, () => {   // Save the new checklist days, get the ingredients, and update the data to the server\r\n            this.getIngredients()   \r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    applyAll() {\r\n        // Set all of the checklist days to true\r\n        this.setState({checklistDays: {\"Sunday\":true,\"Monday\":true,\"Tuesday\":true,\"Wednesday\":true,\"Thursday\":true,\"Friday\":true,\"Saturday\":true}}, () => {\r\n            this.getIngredients()\r\n        })\r\n    }\r\n\r\n    // Method to add a list of ingredients together\r\n    addIngredients(ingredients) {\r\n\r\n        // First we must sort the ingredients by item so we can add them together\r\n        var sorted_by_item = {}\r\n\r\n        // Iterate through each ingredient\r\n        ingredients.forEach(ingredient => {\r\n            if (ingredient) {\r\n                if (sorted_by_item[ingredient[\"item\"]]) {       // If the ingredient is in the json, add the ingredient to the list, otherwise start a list\r\n                    sorted_by_item[ingredient[\"item\"]].push(ingredient)\r\n                } else {\r\n                    sorted_by_item[ingredient[\"item\"]] = [ingredient]\r\n                }\r\n            }\r\n        })           \r\n                           \r\n                    \r\n        var final_list = {}\r\n    \r\n        Object.keys(sorted_by_item).forEach(item => {   // Go through each type of item in the sorted_items\r\n            var sorted_foods = sorted_by_item[item]     // Get the array for each type of item\r\n            var additions = {}\r\n            sorted_foods.forEach(food => {              // Iterate through each food in this array\r\n\r\n                 // Converting to common units\r\n                if (food[\"unit\"] == \"tablespoon\"){      \r\n                    food[\"num\"] *= 3\r\n                    food[\"unit\"] = \"teaspoon\"\r\n                } else if (food[\"unit\"] == \"cup\") {\r\n                    food[\"num\"] *= 48\r\n                    food[\"unit\"] = \"teaspoon\"\r\n                } else if (food[\"unit\"] == \"ounce\") {\r\n                    food[\"num\"] *= 6\r\n                    food[\"unit\"] = \"teaspoon\"\r\n                } \r\n\r\n                var specifier = \"\"\r\n                if (food[\"specifier\"] != \"\") {  // Adds specifer to ingredient name if there is one\r\n                    specifier = \" \" + food[\"specifier\"]\r\n                }\r\n\r\n                // Adds ingredients together with a common unit and specifer\r\n                if (additions[food[\"unit\"] + specifier]) {\r\n                    additions[food[\"unit\"] + specifier] += parseFloat(food[\"num\"])\r\n                } else {\r\n                    additions[food[\"unit\"] + specifier] = parseFloat(food[\"num\"])\r\n                }\r\n            })\r\n\r\n            final_list[item] = additions    // Adds the added ingredient info to the final list under the ingredient's name\r\n        })\r\n    \r\n        var product = []\r\n\r\n        // Iterate through each ingredient item on the list\r\n        Object.keys(final_list).forEach(item => {\r\n            Object.keys(final_list[item]).forEach(unit => {\r\n                var specifier = \"\"\r\n                if (unit.match(/\\(([^)]+)\\)/)) {    // If there is something in the ingredient that looks like: (specifer) inthe unit pull it out\r\n                    var specifier = \"(\"+ unit.match(/\\(([^)]+)\\)/)[1] +\")\"\r\n                }\r\n\r\n                var funit = unit.replace(/ *\\([^)]*\\) */g, \"\");     // Use regex to pull the unit from the item\r\n\r\n                var num = final_list[item][unit]        // Get number\r\n                if (funit == \"teaspoon\" && num >= 3) {  // Convert to common measurements\r\n                    funit = \"tablespoon\"\r\n                    num = num / 3\r\n                }\r\n                if (funit == \"tablespoon\" && num >= 16) {\r\n                    funit = \"cup\"\r\n                    num = num / 16\r\n                }\r\n\r\n                // Save ingredient data to the product\r\n                product.push({\"item\":item, \"unit\":funit, \"num\":num, \"specifier\":specifier})\r\n            })\r\n            \r\n        })\r\n\r\n        return product\r\n    }\r\n\r\n    // Get the list of ingredients from the calendar\r\n    getIngredients() {\r\n        var calendar = this.props.getCalendar()\r\n        var ingredients = []\r\n\r\n        // Iterate through each meal in the calendar and add it ingredients to a list as well as adding a checked property to keep track of which ingredients are checked\r\n        Object.keys(calendar).forEach(type => {\r\n            Object.keys(calendar[type]).forEach(day => {\r\n                if (this.state.checklistDays[day]) {\r\n                    var meal = calendar[type][day]\r\n                    meal.checked = false\r\n                    ingredients = ingredients.concat(meal.ingredients)\r\n                }\r\n            })\r\n        })  \r\n        this.setState({ingredients: this.addIngredients(ingredients)})  // Before saving the ingredients, add those with common units and ingredient names together\r\n    }\r\n\r\n    // Called when an ingredient is checked, reverses its checked property\r\n    toggleIngredient(event) {\r\n        var ingredients = this.state.ingredients\r\n        ingredients[event.target.id].checked = !ingredients[event.target.id].checked\r\n        this.setState({ingredients: ingredients}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Removes an ingredient from the list\r\n    removeIngredient(event) {\r\n        var ingredients = this.state.ingredients\r\n        ingredients.splice(event.target.id, 1)\r\n        this.setState({ingredients: ingredients}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Render function, called everytime there is a change in state\r\n    render() {\r\n\r\n        var n = -1;\r\n        var ingredients = this.state.ingredients.map(ingredient => {\r\n            n++\r\n\r\n            var text = \"\";\r\n            if (ingredient.num > 0) {   // If their is an amount to the ingredient (its not -1)\r\n                for (var i = 0; i < fractions.length; i++) {                // Find a match to the decimal to a unicode fraction\r\n                    if (isFractionEqual(ingredient.num, fractions[i])) { \r\n                        text += fractionsUnicode[i] + \" \"\r\n                        break\r\n                    }\r\n                } \r\n                if (text.length > 0 && Math.floor(ingredient.num) > 0) {    // If there is a unicode fractice and a whole number, add them together\r\n                    text = Math.floor(ingredient.num) + text\r\n                } \r\n                if (text.length == 0) {                                     // If the number couldnt be simplified to a fraction, round the number to two digits after the decimal point\r\n                    text += Math.round(ingredient.num * 100) / 100 + \" \"\r\n                }\r\n            }\r\n\r\n            if (ingredient.unit)        { text += ingredient.unit + \" \" }       // Add a unit if there is one\r\n            if (ingredient.specifier)   { text += ingredient.specifier + \" \"}   // Add a specifier if there is one\r\n            text += ingredient.item\r\n\r\n            return (    // Format the ingredient information\r\n                <div class=\"ingredient\">\r\n                    <input class=\"ingredientCheckbox\" type=\"checkbox\" checked={ingredient.checked} id={n} onChange={this.toggleIngredient}></input>\r\n                    <span>{text}</span>\r\n                    <span class=\"xicon\" id={n} onClick={this.removeIngredient}>✕</span>\r\n                </div>\r\n            )\r\n            \r\n        })\r\n        if (ingredients.length == 0) {  // If there are no ingredients just put some text that says thate\r\n            ingredients.push(\r\n                <div id=\"noIngredients\">\r\n                    <i style={{color: \"#ccc\"}}>There are no meals on your calendar.</i>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        // Iterate through each of the days and add a checkbox, checked if the checkbox is true\r\n        var dayCheckboxes = Object.keys(this.state.checklistDays).map(day => {\r\n            return (\r\n                <span class=\"dayCheck\"><input type=\"checkbox\" checked={this.state.checklistDays[day]} onChange={(e) => this.checkDay(e,day)}></input>{day} </span>\r\n            )\r\n        })\r\n\r\n        return (    // Format the shoppinglist window\r\n                <div id=\"shoppinglist\" class=\"w3-card-4 w3-margin\">\r\n                    <div id=\"header\" style={{height: \"40px\", \"margin-bottom\":\"-15px\"}}>\r\n                        <h3>Shopping List</h3>\r\n                        <button class=\"reloadButtonList\" onClick={this.getIngredients}><img id=\"reloadIconList\" src={reload}></img></button>\r\n                        <button class=\"exportButtonList\" onClick={this.exportList}><img id=\"exportIconList\" src={exportIcon}></img></button>\r\n                    </div>\r\n                    <div id=\"shoppinglistbody\">\r\n                        {ingredients}\r\n                    </div>\r\n                    <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n                        <div style={{transform: \"translate(0px, 3px)\"}}>\r\n                            {dayCheckboxes}\r\n                            <button id=\"applyAll\" onClick={this.applyAll}>Apply All</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default ShoppingList;","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\NutritionInfo.js",["223","224","225","226","227","228","229","230","231","232"],"/*\r\nThis is the class for the NutritionInfo window, this class is responsible for:\r\n1. Pulling data from the calendar\r\n2. Adding together nutrition info from each meal\r\n3. Categeorizing the nutrition info into seperate days\r\n4. Outputting the nutrition info in a tabbed window\r\n*/\r\n\r\n// React native imports and css\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\n\r\n// Image imports\r\nimport reload from '../icons/reload.png'\r\nimport exportIcon from \"../icons/export.png\"\r\n\r\n// NutritionInfo Class\r\nclass NutritionInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Define nutrition info variables, the nutrtion info its self, the current tab, and the servings to calculate for\r\n        this.state = {nutritions: {}, day: \"Total\", servings: 1}    \r\n\r\n        // We must bind class functions in React\r\n        this.setDay =           this.setDay.bind(this)\r\n        this.reloadNutrition =  this.reloadNutrition.bind(this)\r\n        this.getNutrition =     this.getNutrition.bind(this)\r\n        this.changeServings =   this.changeServings.bind(this)\r\n    }\r\n\r\n    // Function to handle changes in the total servings to calculate\r\n    changeServings(event) {\r\n        this.setState({servings: event.target.value}, () => {   // Set the servings state to the input value than re-calculate nutrition\r\n            this.setState({nutritions: this.getNutrition()})\r\n        })\r\n    }\r\n\r\n    // Function that returns the nutrition info data tobe displayed in the window\r\n    getNutrition() {\r\n        var calendar = this.props.getCalendar() // Retreive the calendar from the calendar class\r\n\r\n        // Creates an empty data structure for each tab on the nutrition info window\r\n        var nutritions = {\"Total\":{},\"Sunday\":{},\"Monday\":{},\"Tuesday\":{},\"Wednesday\":{},\"Thursday\":{},\"Friday\":{},\"Saturday\":{}}\r\n\r\n        // Iterates through each meal in the calendar by going through each type and day\r\n        Object.keys(calendar).forEach(type => {\r\n            Object.keys(calendar[type]).forEach(day => {\r\n\r\n                 // If the meal has a nutrition section, proceed (empty meals will not have a nutrition section and will therefore be disregarded)\r\n                if (calendar[type][day].nutrition && Object.keys(calendar[type][day]).length > 1) {   \r\n\r\n                    // Iterate through each part of the nutrition section (calories, carbs, protein, etc.)\r\n                    Object.keys(calendar[type][day].nutrition).forEach(nutrition => {   \r\n                        var mealNutrition = calendar[type][day].nutrition\r\n\r\n                        // Add the nutrition amounts multipled by the servings to the appropriate section in the tabs\r\n                        if (nutritions[day][nutrition]) {\r\n                            nutritions[day][nutrition] += mealNutrition[nutrition] * this.state.servings \r\n                        } else {\r\n                            nutritions[day][nutrition] = mealNutrition[nutrition] * this.state.servings\r\n                        }\r\n\r\n                        // Add the nutrition info multipled by the servings to the total tab\r\n                        if (nutritions[\"Total\"][nutrition]) {\r\n                            nutritions[\"Total\"][nutrition] += mealNutrition[nutrition] * this.state.servings\r\n                        } else {\r\n                            nutritions[\"Total\"][nutrition] = mealNutrition[nutrition] * this.state.servings\r\n                        }\r\n\r\n                    })\r\n                }\r\n\r\n            })\r\n        })\r\n\r\n        return nutritions   // Return nutrition tab data to be displayed\r\n    }\r\n\r\n    // Refreshes the nutrition info by fetching the meals again from the calendar and recalulating nutrition\r\n    reloadNutrition() {\r\n        this.setState({nutritions: this.getNutrition()})\r\n    }\r\n\r\n    // Changes the tab\r\n    setDay(day) {\r\n        this.setState({day: day, nutritions: this.getNutrition()})\r\n    }\r\n\r\n    // Render function, called each time their is a state change\r\n    render () {\r\n\r\n        // Loop through each day and create a tab at the top of Nutrition window\r\n        var tabs = [\"Total\",\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"].map(tab => {\r\n            return (    // Return a button element that calls setDay on a click and changes color based on the current tab selected\r\n                <button class=\"nutritionTab\" onClick={() => this.setDay(tab)} style={(tab == this.state.day) ? {\"background-color\": \"#ccc\"} : {\"background-color\": \"\"}}>{tab}</button>\r\n            )\r\n        })\r\n\r\n        // Display nutrition info only if their is nutrition info to display\r\n        if (Object.keys(this.state.nutritions).length > 0) {    \r\n\r\n            // Iterate through each tab of data stored and get the html elements\r\n            var nutritionInfoElements = Object.keys(this.state.nutritions[this.state.day]).map(nutrition => {\r\n\r\n                // Formats the output values for each nutrition component\r\n                var nutritionDescriptor = nutrition.charAt(0).toUpperCase() + nutrition.slice(1) + \": \" // Capitalizes first letter of string and a colon to the end\r\n                var nutritionNumber = this.state.nutritions[this.state.day][nutrition]  \r\n                var nutritionNumber = Math.round(nutritionNumber * 100) / 100   // Rounds to two digits after the demimal points\r\n\r\n                if (nutrition == \"protein\" || nutrition == \"carbohydrates\" || nutrition == \"fat\") { // Add a g to the end of nutrition components measured in grams\r\n                    nutritionNumber += \" g\"\r\n                } else if (nutrition == \"cholesterol\" || nutrition == \"sodium\") {   // Add a mg to the end of nutrition components measured in milligrams                \r\n                    nutritionNumber += \" mg\"\r\n                }\r\n\r\n                return (    // Return the html element for one nutrition component\r\n                    <div class=\"nutritionInfoElement\">\r\n                        <span class=\"nutritionDescriptor\">{nutritionDescriptor}</span>\r\n                        <span class=\"nutritionNumber\">{nutritionNumber}</span>\r\n                    </div>\r\n                )\r\n\r\n            })\r\n        }\r\n\r\n        return (    // Returns the html for the formatting of the tabs and nutrition components within the Nutrition Info window\r\n            <div id=\"nutritioninfo\" class=\"w3-card-4 w3-margin\">\r\n                <div id=\"header\" style={{height: \"40px\", \"margin-bottom\":\"0px\"}}>\r\n                    <h3 style={{display: \"inline\"}}>Nutrition Info</h3>\r\n                    <span id=\"servingsNutrition\">Per <input id=\"servingsNutritionInput\" type=\"number\" min=\"1\" value={this.state.servings} onChange={this.changeServings}></input> servings.</span>\r\n                    <button class=\"reloadButtonList nutButton\" onClick={this.reloadNutrition}><img id=\"reloadIconList\" src={reload}></img></button>\r\n                </div>\r\n                <div id=\"nutritioninfobody\">\r\n                    <div id=\"nutitionNavBar\">{tabs}</div>\r\n                    {nutritionInfoElements}\r\n                </div>\r\n                <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n                    <div style={{transform: \"translate(0px, 3px)\"}}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NutritionInfo","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Export.js",["233","234","235","236","237","238","239","240","241","242"],"/* \r\nThis is the export class that shows up when you click the export button on the calendar or the shopping list, its resposible for:\r\n1. Converting html elements to png and jpg\r\n2. Showing the element as an image preview\r\n3. Sending the element to be printed\r\n*/\r\n\r\n// Imports for react native and the css\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport '../index.css'\r\n\r\n// Imports needed to take html and turn it into images\r\nimport * as htmlToImage from 'html-to-image'\r\nimport { toPng, toJpeg, toBlob, toPixelData, toSvg } from 'html-to-image'\r\n\r\nfunction hiddenClone(element){\r\n    // Create clone of element\r\n    var clone = element.cloneNode(true)\r\n    \r\n    // Position element relatively within the \r\n    // body but still out of the viewport\r\n    var style = clone.style\r\n    style.position = 'relative'\r\n    style.top = window.innerHeight + 'px'\r\n    style.left = 0\r\n    \r\n    // Append clone to body and return the clone\r\n    document.body.appendChild(clone)\r\n    return clone\r\n}\r\n\r\n// Returns new html tab for printing\r\nfunction ImagetoPrint(source) {\r\n    return \"<html><head><scri\"+\"pt>function step1(){\\n\" +\r\n            \"setTimeout('step2()', 10);}\\n\" +\r\n            \"function step2(){window.print();window.close()}\\n\" +\r\n            \"</scri\" + \"pt></head><body onload='step1()'>\\n\" +\r\n            \"<img src='\" + source + \"' /></body></html>\"\r\n}\r\n\r\n// Function that takess an image and prints\r\nfunction PrintImage(source) {\r\n    var Pagelink = \"about:blank\"\r\n    var pwa = window.open(Pagelink, \"_new\")   // Opens a new page with the image\r\n    pwa.document.open()\r\n    pwa.document.write(ImagetoPrint(source))\r\n    pwa.document.close()\r\n}\r\n\r\n// Export class\r\nclass Export extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // Class properties for keepng track of whether to display or not and saving the element to export\r\n        this.state = {display: false, element: null}\r\n\r\n        // In React class methods must be defined\r\n        this.show =     this.show.bind(this)\r\n        this.hide =     this.hide.bind(this)\r\n        this.print =    this.print.bind(this)\r\n        this.png =      this.png.bind(this)\r\n        this.jpg =      this.jpg.bind(this)\r\n    }\r\n    \r\n    // Prints the element\r\n    print() {\r\n        \r\n        var element = this.state.element\r\n        ReactDOM.render(element, document.getElementById(\"hiddenCalendarParent\"))   // Converts JSX to a DOM element\r\n        document.getElementById(\"hiddenCalendarParent\").style.display = \"block\"     // Shows hiddenCalendarParent so it can be captured by htmlToImage\r\n\r\n        var node = document.getElementById('hiddenCalendarParent');\r\n        htmlToImage.toPng(node)\r\n            .then((dataUrl) => {\r\n                PrintImage(dataUrl)\r\n                document.getElementById(\"hiddenCalendarParent\").style.display = \"none\"  // Hides hiddenCalendarParent\r\n                this.hide()\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    // Exports the element as a jpeg\r\n    jpg() {\r\n        \r\n        var element = this.state.element\r\n        ReactDOM.render(element, document.getElementById(\"hiddenCalendarParent\"))   // Converts JSX to a DOM element\r\n        document.getElementById(\"hiddenCalendarParent\").style.display = \"block\"     // Shows hiddenCalendarParent so it can be captured by htmlToImage\r\n\r\n        var node = document.getElementById('hiddenCalendarParent');\r\n        htmlToImage.toJpeg(node)\r\n            .then((dataUrl) => {\r\n                \r\n                // Create a <a> download tag, sets its source to the png, and clicks it\r\n                var a = document.createElement(\"a\"); \r\n                a.href = dataUrl\r\n                a.download = \"export.jpeg\"\r\n                a.click()                // Clicks the download link so it downloads automatically\r\n                document.getElementById(\"hiddenCalendarParent\").style.display = \"none\"  // Hides hiddenCalendarParent\r\n                this.hide()\r\n            })\r\n            .catch((error) => {   // Error catching\r\n                console.error(error);    \r\n            });\r\n    }\r\n\r\n    // Exports the element as a png\r\n    png() {\r\n        var element = this.state.element\r\n        ReactDOM.render(element, document.getElementById(\"hiddenCalendarParent\"))   // Converts JSX to a DOM element\r\n        document.getElementById(\"hiddenCalendarParent\").style.display = \"block\"     // Shows hiddenCalendarParent so it can be captured by htmlToImage\r\n\r\n        var node = document.getElementById('hiddenCalendarParent');\r\n        htmlToImage.toPng(node)     // Gets the node as a png base 64\r\n            .then((dataUrl) => {\r\n\r\n                // Create a <a> download tag, sets its source to the png, and clicks it\r\n                var a = document.createElement(\"a\") \r\n                a.href = dataUrl           \r\n                a.download = \"export.png\"  \r\n                a.click()                   // Clicks the download link so it downloads automatically\r\n                document.getElementById(\"hiddenCalendarParent\").style.display = \"none\"  // Hides hiddenCalendarParent\r\n\r\n                this.hide()\r\n            })\r\n            .catch((error) => {     // Error catching\r\n                console.error(error)\r\n            });\r\n    }\r\n\r\n    // Shows the export window and loads in a preview of the export content\r\n    show(element) {\r\n        this.state.element = element\r\n        ReactDOM.render(element, document.getElementById(\"hiddenCalendarParent\"))   // Converts JSX to a DOM element\r\n        \r\n        // Displays the export window\r\n        this.setState({display: true}, () => {\r\n            var node = document.getElementById('hiddenCalendarParent');\r\n\r\n            document.getElementById('hiddenCalendarParent').style.display = 'block';    // Shows hiddenCalendarParent so it can be captured by htmlToImage    \r\n            htmlToImage.toPng(node).then((dataUrl) => { // Gets the node as a png base 64\r\n\r\n                var img = new Image();                  // Creates an class from the dataURL\r\n                img.src = dataUrl;\r\n                img.width = node.offsetWidth / 3.5      // Resizing the image to be smaller\r\n                img.height = node.offsetHeight / 3.5\r\n                img.id = \"exportImage\"\r\n\r\n                document.getElementById('hiddenCalendarParent').style.display = 'none';     // Hides hiddenCalendarParent\r\n                \r\n                // Making the image the background of the preview box so if it bigger than the window it won't overflow\r\n                document.getElementById(\"exportContentParent\").style.backgroundImage = \"url('\"+ img.src +\"')\"\r\n                document.getElementById(\"exportContentParent\").style.backgroundSize = img.width +\"px 250px\"\r\n                \r\n                // Positioning the image based upon what element it is\r\n                if (element.props.id == \"calendarExport\") {\r\n                    document.getElementById(\"exportImage\").style.top = \"35%\"\r\n                    document.getElementById(\"exportImage\").style.left = \"1%\"\r\n                } else {\r\n                    document.getElementById(\"exportImage\").style.top = \"0%\"\r\n                    document.getElementById(\"exportImage\").style.left = \"0%\"\r\n                }\r\n                \r\n                \r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n        })\r\n    }\r\n\r\n    // Hide the export window\r\n    hide() {\r\n        this.setState({display: false})\r\n    }\r\n\r\n    // Render function, triggered each time their is a state change\r\n    render() {\r\n        if (this.state.display) {   // If display is true show the export window\r\n            return (                // Render the export window over a gray overlay\r\n                <div>\r\n                    <div id=\"overlay\">\r\n                    </div>\r\n                    <div id=\"export\" class=\"w3-card-4 w3-margin\">\r\n                        <div id=\"header\" style={{height: \"40px\", \"margin-bottom\":\"0px\"}}>\r\n                            <h3 style={{display: \"inline\"}}>Export</h3>\r\n                            <button class=\"exitExport\" onClick={this.hide}>✕</button>\r\n                        </div>\r\n                        <div id=\"exportBody\">\r\n                            <div id=\"exportContentParent\"></div>\r\n                            <div id=\"exportButtons\">\r\n                                <button class=\"exportChoice\" onClick={this.print}>Print</button>\r\n                                <button class=\"exportChoice\" onClick={this.png}>Download as PNG</button>\r\n                                <button class=\"exportChoice\" onClick={this.jpg}>Download as JPEG</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {                // Otherwise don't show anything\r\n            return (        \r\n                <div style={{display: \"none\"}}></div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Export","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\LoadingScreen.js",["243","244","245"],"/* \r\nThis is the class for the loading screen that pops up once the user has logged in or refreshed the site, this class is responsible for:\r\n1. Showing on startup\r\n2. Displaying a loading gif, laoding tip, and a overlay over the unpopulated site content\r\n3. Hiding when everything is loaded\r\n*/\r\n\r\n// React native imports and css\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\n\r\n// Loading gif\r\nimport loadingAnimation from '../icons/loadingPurple.gif'\r\nimport { floor } from 'mathjs';\r\n\r\n// Loading tips pulled from a google doc\r\nvar loadingTips = [\r\n    \"Click and drag the three green lines in the top corner of a meal to move it to another day.\",\r\n    \"Add notes to a meal in the meal editor to add specific directions.\",\r\n    \"Press the red X under a day on the calendar to cancel all meals on that day.\",\r\n    \"Click the meal name to be taken to its recipe page.\",\r\n    \"Use the filter on the meal selector to search for meal names, types, categories, ingredients, and even words from notes.\",\r\n    \"Press the export button on the calendar to print or export your calendar as an image.\",\r\n    \"Press the export button on the shopping list to print or export your shopping list as an image.\",\r\n    \"Did you know that meal planner pro has over 200 dishes and meals to choose from!\",\r\n    \"Log back in to view your saved and edited meals.\",\r\n    \"You can add your own meals by clicking the add meal button in the meal selector section.\",\r\n    \"Print out the calendar so the whole family can see what meals they’re gonna have for the day.\"\r\n]\r\n\r\n// Gets a random number between the min and max\r\nfunction random(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); \r\n}\r\n\r\n// LoadingScreen class\r\nclass LoadingScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Define a variable if the component should be shown or not\r\n        this.state = {\"show\": true}\r\n\r\n        // Class functions must be binded in React\r\n        this.hide = this.hide.bind(this)\r\n    }\r\n\r\n    // Hides the component\r\n    hide() {\r\n        document.getElementById(\"htmlTag\").style[\"overflow-y\"] = \"auto\" // Turns scrolling back on\r\n        this.setState({\"show\": false})\r\n    }\r\n\r\n    // Render function, called everytime the state updates\r\n    render() {\r\n        return (    // HTML formatting for the gif, overlay, and loading tip, only displays when state.show is true\r\n            <div style={this.state.show ? {\"display\": \"block\"} : {\"display\": \"none\"}}>\r\n                <div id=\"loading\">\r\n                    <img id=\"loadingAnimation\" src={loadingAnimation}></img>\r\n                    <div id=\"loadingTip\">{loadingTips[random(0,loadingTips.length)]}</div>\r\n                </div>\r\n                <div id=\"loadingOverlay\">\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoadingScreen","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\Warning.js",["246","247","248","249"],"/* \r\nThis is the class for the warning that pops up when you go to delete a meal, this class is responsible for:\r\n1. Showing when the delete button is hit on the mealselector based upon the showWarning cookie\r\n2. Modifying the showWarning cookie if the checkbox is clicked\r\n3. Deleting the meal and hiding if the delete meal button is clicked\r\n4. Not deleting the meal and hiding if the close button is clicked\r\n*/\r\n\r\n\r\n// React native imports and css\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport '../index.css'\r\n\r\n// Helper function to set browser cookies\r\nfunction setCookie(cname, cvalue, exdays) {\r\n    var d = new Date()\r\n    d.setTime(d.getTime() + (exdays*24*60*60*1000))\r\n    var expires = \"expires=\"+ d.toUTCString()\r\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\"\r\n}\r\n\r\n// Helper function to get browser cookies\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\"\r\n    var decodedCookie = decodeURIComponent(document.cookie)\r\n    var ca = decodedCookie.split(';')\r\n    for(var i = 0; i <ca.length; i++) {\r\n      var c = ca[i]\r\n      while (c.charAt(0) == ' ') {\r\n        c = c.substring(1)\r\n      }\r\n      if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length)\r\n      }\r\n    }\r\n    return \"\"\r\n}\r\n\r\n// Warning class\r\nclass Warning extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {display: false}   // A class property for keeping track if the warning should be showing or not\r\n\r\n        // React component functions must be binded\r\n        this.show =             this.show.bind(this)\r\n        this.hide =             this.hide.bind(this)\r\n        this.deleteMeal =       this.deleteMeal.bind(this)\r\n        this.dontShowAgain =    this.dontShowAgain.bind(this)\r\n    }\r\n\r\n    // Function to show the warning conditional on the cookie\r\n    show() {\r\n        if (getCookie(\"showWarning\") == \"false\") {  // If the cookie showWarning is false just delete the meal, don't show the warning\r\n            this.props.deleteMeal()\r\n        } else {                                    // Otherwise show the warning window\r\n            this.setState({display: true})\r\n        }\r\n    }\r\n\r\n    // Function to hide the window\r\n    hide() {\r\n        this.setState({display: false})\r\n    }\r\n\r\n    // Function to tell the mealselector to delete the meal and hide this window\r\n    deleteMeal() {\r\n        this.props.deleteMeal()\r\n        this.hide()\r\n    }\r\n\r\n    // Modify the showWarning cookie\r\n    dontShowAgain() {\r\n        setCookie(\"showWarning\", false, 100)\r\n    }\r\n\r\n    // Render function, triggers every time there is a state change\r\n    render() {\r\n\r\n        if (this.state.display) {   // Only display this html is the display state is true\r\n            return (\r\n                <div>\r\n                    <div id=\"overlay\">\r\n                    </div>\r\n                    <div id=\"warning\" class=\"w3-card-4 w3-margin\">\r\n                        <div id=\"header\" style={{height: \"40px\", \"margin-bottom\":\"0px\"}}>\r\n                            <h3 style={{display: \"inline\"}}>Delete Meal</h3>\r\n                            <button class=\"exitWarning\" onClick={this.hide}>✕</button>\r\n                        </div>\r\n                        <div id=\"warningBody\">\r\n                            <div id=\"warningText\">Are you sure you want to delete this meal? This action cannot be reversed.</div>\r\n                            <button id=\"confirmWarningButton\" onClick={this.deleteMeal}>Delete Meal</button>\r\n                        </div>\r\n                        <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n                            <input type=\"checkbox\" id=\"warningCheck\" onChange={this.dontShowAgain}></input> <div id=\"checkText\">Don't show this warning again</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {                // Otherwise display nothing\r\n            return (\r\n                <div style={{display: \"none\"}}></div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Warning","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\ImportRecipe.js",["250","251","252","253","254","255","256","257","258","259","260","261"],"// React native imports and css\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\n\r\n// Jquery for sending ajax calls to the server\r\nimport $ from \"jquery\"\r\n\r\n// Javascript beautiful soup clone, used to scrape data from html\r\nimport JSSoup from 'jssoup'; \r\n\r\n// Server domain\r\nvar domain = \"http://127.0.0.1:3000\"\r\n\r\n// Parallel lists for fractional integers and their unicode values\r\nvar fractions = [1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 2/5, 3/5, 4/5, 1/6, 5/6, 1/8, 3/8, 5/8, 7/8]\r\nvar fractionsUnicode = [\"½\", \"⅓\", \"⅔\", \"¼\", \"¾\", \"⅕\", \"⅖\", \"⅗\", \"⅘\", \"⅙\", \"⅚\", \"⅛\", \"⅜\", \"⅝\", \"⅞\"]\r\n\r\n// Parses the numbers taken from ingredient info\r\nfunction parseNum(word) {\r\n    if (!isNaN(word)) {     // If the word is just a number and not a unicode fraction that return as an int\r\n        return parseInt(word)\r\n    } else {                // Otherwise convert the unicode fraction\r\n        for (var i = 0; i < fractions.length; i++) {    // Iterate through each unicode fraction and finc the one that matches, return the appropriate integer\r\n            if(word == fractionsUnicode[i]) {\r\n                return fractions[i]\r\n            }\r\n        }\r\n    }\r\n    return -1\r\n}\r\n\r\n// Identify and return the index of specifers in the ingredient, specifiers are stuff like: \"(7 ounce)\", \"(6 inch)\"\r\nfunction parseSpecifier(words, i) {\r\n    var specifier = \"\"\r\n    var word = words[i]    // Get i word from ingredient\r\n    try {\r\n        if (word.includes(\"(\") && word.includes(\")\")) {     // Checks if word looks like this: \"(specifier)\"\r\n            specifier = word\r\n            return [specifier, i+1]\r\n        } else if (word.includes(\"(\")) {\r\n            var n = i\r\n            for (var w of words.slice(i)) { // Iterates through words after the \"(string\"  \r\n                i += 1\r\n                specifier += \" \" + w\r\n                if (w.includes(\")\")) {          // Checks if word looks like this: \"string)\"\"\r\n                    return [specifier.trim(), i+1]\r\n                }\r\n            }\r\n            return [\"\", n]\r\n        } else {\r\n            return [\"\", i]\r\n        }\r\n    } catch (e) {           // If the ingredient doesn't have enough words, just return empty\r\n        return [\"\", i]\r\n    }\r\n}\r\n\r\n// Define a list of units to be parsed\r\nvar units = [\"teaspoon\",\"tablespoon\",\"cup\",\"pint\",\"ounce\",\"package\",\"slice\",\"pinch\",\"clove\",\"piece\",\"pound\",\"can\",\"container\",\"jar\"]\r\n\r\n// De-pluralize the unit in the ingredient and see if it matches one of our listed units\r\nfunction parseUnit(word) {\r\n    if (word.slice(-1) == \"s\") {    // If the last character is an s, cut the string so it excludes the last character\r\n        word = word.slice(0,-1)\r\n    }\r\n    if (units.includes(word)) {     // If the unit given is in our listen of units, it is valid an return it\r\n        return word\r\n    } else {                        // Otherwise, return nothing\r\n        return \"\"\r\n    }\r\n}\r\n\r\n// Uses regex to find a substring inside another string but only if that substring is its own word\r\n// Examples: \"by\", \"by the sea\" -> true, \"by\", \"bartleby\" -> false\r\nfunction isMatch(searchOnString, searchText) {\r\n    searchText = searchText.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n    return searchOnString.match(new RegExp(\"\\\\b\"+searchText+\"\\\\b\", \"i\")) != null;\r\n}\r\n  \r\n// Checks if the ingredient can be categorized from a standarized list of ingredients\r\nfunction categorize(ingredient, knownUnit, categories) {\r\n    var result = \"\"\r\n    ingredient = ingredient.toLowerCase()   // Turn ingredient string to lower case\r\n\r\n    // Split the contents of the category file into seperate lines, each line is a different recipe\r\n    var categories = categories.split(\"\\n\")\r\n\r\n    // Iterate through each of our standardized ingredients\r\n    categories.forEach((category) => {\r\n        category = category.trim()  // remove whitespace from category\r\n        \r\n        // # If the ingredient name is within the category, disregarding plurality of the ingredient name, proceed\r\n        if (isMatch(ingredient, category) || (ingredient.includes(category.slice(0,-1)) && category.slice(-1) == \"s\")) {\r\n            //if (category.split(\" \").length > result.split(\" \").length || result == \"\") {\r\n            // # Only proceed if the ingredient unit is in the category, the unit not is empty, or neither, not both\r\n            if (!(category.includes(knownUnit) && knownUnit != \"\")) {\r\n                result = category\r\n            }\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n    \r\n// Use regex to check if the url is valid\r\nfunction validateURL(value) {\r\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\r\n}\r\n\r\n// ImportRecipe class\r\nclass ImportRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Class properties to keep track of whether or not the window  should be displayed and the url to import\r\n        this.state = {display: false, url: \"\"}  \r\n\r\n        // Class methods must be binded in React\r\n        this.show =             this.show.bind(this)\r\n        this.hide =             this.hide.bind(this)\r\n        this.importData =       this.importData.bind(this)\r\n        this.updateURL =        this.updateURL.bind(this)\r\n        this.parseRecipe =      this.parseRecipe.bind(this)\r\n    }\r\n\r\n    // Shows the import recipe window\r\n    show() {\r\n        this.setState({display: true})\r\n    }\r\n\r\n    // Hides the import recipe window\r\n    hide() {\r\n        this.setState({display: false})\r\n    }\r\n\r\n    // Updates the url when there is a change in the url input\r\n    updateURL(event) {\r\n        this.setState({url: event.target.value})\r\n    }\r\n\r\n    parseRecipe(url, callback) {\r\n        var result = {}     // Create empty meal data structure\r\n        console.log(\"start parse\")\r\n        // Make POST call to /recipe_url server\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/recipe_url\",\r\n            data: JSON.stringify({ url: url }),  // Send url\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            success: (data) => {\r\n                var categories = data.categories    // Receives list of category ingredients and html of recipe webpage\r\n                var html = data.data\r\n                var soup = new JSSoup(html);    // Parse html\r\n\r\n                // Get each piece of nutrition info\r\n                var nutritions = soup.find(\"div\", {\"class\": \"recipe-nutrition-section\"}).find(\"div\", {\"class\": \"section-body\"}).getText().trim()\r\n                \r\n                // Get meal image\r\n                result[\"image\"] = soup.find(\"div\", {\"class\": \"image-container\"}).find(\"img\").attrs.src\r\n                \r\n                // Scrape each ingredient element\r\n                var ingredients = soup.findAll(\"span\", {\"class\": \"ingredients-item-name\"}).map((element) => {\r\n                    return element.getText().trim()\r\n                })\r\n\r\n                // Scrape the number of servings\r\n                result[\"servings\"] = parseInt(soup.findAll(\"div\", {\"class\": \"two-subcol-content-wrapper\"})[1].find(\"div\", {\"class\": \"recipe-meta-item\"}).find(\"div\", {\"class\": \"recipe-meta-item-body\"}).getText().trim())\r\n                \r\n                // Set metadata for each meal\r\n                result[\"enabled\"] = true\r\n                result[\"url\"] = url\r\n                \r\n                // Parse nutrition components\r\n\r\n                result[\"nutrition\"] = {}\r\n                var nutrition = nutritions.trim()\r\n\r\n                // Iterate through each nutrition compopone\r\n                nutrition.split(\";\").forEach((component) => {\r\n                    component = component.split(\".\")[0].trim()  // Remove double spaces\r\n                    var parts = component.split(\" \")            // Split component into its parts\r\n\r\n                    // Remove units from ingredient amount and convert to integer\r\n                    if (parts[1] == \"calories\") {\r\n                        result[\"nutrition\"][parts[1]] = parseInt(parts[0].replace(\"g\",\"\").replace(\"mg\",\"\").replace(\"m\",\"\"))\r\n                    } else {\r\n                        result[\"nutrition\"][parts[0]] = parseInt(parts[1].replace(\"g\",\"\").replace(\"mg\",\"\").replace(\"m\",\"\"))\r\n                    }\r\n                })\r\n                \r\n                // Parse ingredient components\r\n\r\n                result[\"ingredients\"] = []\r\n\r\n                // Iterate through each ingredient\r\n                ingredients.forEach((ingredient) => {\r\n                    ingredient = ingredient.replace(/ +(?= )/g,''); // Remove double spaces\r\n                    var words = ingredient.split(\" \")               // Split ingredient into words\r\n\r\n                    // Create empty ingredient data structure\r\n                    var data = { \"num\": parseNum(words[0]), \"specifier\": \"\", \"unit\": \"\", \"item\": \"\"}\r\n\r\n                    // Parse ingredient amount and specifier\r\n                    if (parseNum(words[1]) != -1) {\r\n                        data[\"num\"] += parseNum(words[1])           \r\n                        var specifierData = parseSpecifier(words,2)\r\n                        data[\"specifier\"] = specifierData[0]\r\n                        var i = specifierData[1]\r\n                    } else {\r\n                        var specifierData = parseSpecifier(words,1)\r\n                        data[\"specifier\"] = specifierData[0]\r\n                        var i = specifierData[1]\r\n                    }\r\n\r\n                    // Parse unit and ingredient name\r\n                    data[\"unit\"] = parseUnit(words[i])\r\n                    data[\"item\"] = categorize(ingredient, data[\"unit\"], categories)\r\n\r\n                    // Add ingredient to array\r\n                    result[\"ingredients\"].push(data)\r\n\r\n                })\r\n\r\n                callback(result)    // Return meal result\r\n            },\r\n            error: (e) => {\r\n                console.log(e)\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    // Start process of importing recipe data\r\n    importData() {\r\n        var url = this.state.url\r\n        if (url != \"\" && url.includes(\"allrecipes\") && validateURL(url)) {  // Make sure URL is valid and an allrecipes link\r\n            this.parseRecipe(url, (result) => {     // Parse recipe then tell mealselector to import data and hide import recipe window\r\n                this.props.importData(result)\r\n                this.hide()\r\n            }) \r\n        }\r\n        \r\n    }\r\n\r\n    // Render function, triggered on state change\r\n    render() {\r\n\r\n        if (this.state.display) {   // Display URL input form, window, and overlay if display is true\r\n            return (\r\n                <div>\r\n                    <div id=\"overlay\">\r\n                    </div>\r\n                    <div id=\"import\" class=\"w3-card-4 w3-margin\">\r\n                        <div id=\"header\" style={{height: \"40px\", \"margin-bottom\":\"0px\"}}>\r\n                            <h3 style={{display: \"inline\"}}>Import Recipe</h3>\r\n                            <button class=\"exitWarning\" onClick={this.hide}>✕</button>\r\n                        </div>\r\n                        <div id=\"importBody\">\r\n                            <p>Import nutrition information and ingredients from the web. Currently MealPlannerPro only supports allrecipes.com.</p> \r\n                            <input placeholder=\"allrecipes.com URL\" onChange={(event) => this.updateURL(event)}></input>\r\n                            <button id=\"importRecipeButton\" onClick={this.importData}>Import Recipe</button>\r\n                            <p style={{color: \"#f0756e\", \"margin-top\": \"10px\"}}>Note: This action will override any nutrition information and ingredients for this meal.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {                // Otherwise display nothing\r\n            return (\r\n                <div style={{display: \"none\"}}></div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default ImportRecipe\r\n","C:\\Users\\HP\\OneDrive\\mealplanner\\client\\src\\Components\\CalendarRules.js",["262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289"],"/* \r\nThis is the class for the calendar rule generation window that pops up when you click the edit ruleset button on the\r\ntop right of the calendar, this class is resposible for:\r\n1. Allowing the user to input selectors and rules\r\n2. Communicating with the server so these rules are saved\r\n3. Communicating with the calendar so it always has up to date rules\r\n*/\r\n\r\n// Imports for react native and css\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport '../index.css'\r\n\r\n// Jquery for sending data to the server\r\nimport $ from \"jquery\"\r\n\r\n// Icons used\r\nimport deleteRulesetIcon from '../icons/delete.png'\r\nimport addRulesetIcon from '../icons/addRuleset.png'\r\n\r\n// AES for data encryption\r\nvar aesjs = require('aes-js');\r\nvar domain = \"http://127.0.0.1:3000\"\r\n\r\n// Helper function to retreive the user token which is stored as a cookie\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for(var i = 0; i <ca.length; i++) {\r\n        var c = ca[i]\r\n        while (c.charAt(0) == ' ') {\r\n        c = c.substring(1)\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\n// Takes in an integer and returns a 128-bit array to be used as a key for AES\r\nfunction generate128BitKey(s) {\r\n    var key = []\r\n    for (var i = 0; i < 16; i++) {  // If s is 15 then the array will be: [15, 16, 17, 18, 19...]\r\n        key.push(s + i)\r\n    }\r\n    return key\r\n}\r\n\r\n// Encrypts string using s as a key and AES as the cipher\r\nfunction aesEncrypt(str, s) {\r\n    // Turns our integer key into a 128-bit key\r\n    var key = generate128BitKey(s)\r\n\r\n    // Converting our text into to bytes\r\n    var textBytes = aesjs.utils.utf8.toBytes(str)\r\n\r\n    // Encyrypting our bytes using AES Counter mode\r\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5))\r\n    var encryptedBytes = aesCtr.encrypt(textBytes)\r\n\r\n    // Converting back to text for easy handling in communication\r\n    var finalResult = aesjs.utils.hex.fromBytes(encryptedBytes)\r\n    return finalResult\r\n}\r\n\r\n// Returns a string with the first letter capitalized\r\nfunction capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\nclass CalendarRules extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Store class properties for display of window, rule data, currentRuleset, and the days and types included in the calendar\r\n        this.state = {\r\n            display: false, \r\n            rulesets: {}, \r\n            currentRuleset: 0, \r\n            days: {}, \r\n            types: []\r\n        }\r\n\r\n        // We must bind class methods in react\r\n        this.show =                     this.show.bind(this)\r\n        this.hide =                     this.hide.bind(this)\r\n        this.updateData =               this.updateData.bind(this)\r\n        this.getSelectors =             this.getSelectors.bind(this)\r\n        this.getSelectorParameters =    this.getSelectorParameters.bind(this)\r\n        this.addSelector =              this.addSelector.bind(this)\r\n        this.removeSelector =           this.removeSelector.bind(this)\r\n        this.getRules =                 this.getRules.bind(this)\r\n        this.selectorSelectChange =     this.selectorSelectChange.bind(this)\r\n        this.selectorParameterChange =  this.selectorParameterChange.bind(this)\r\n        this.addSelectorParameter =     this.addSelectorParameter.bind(this)\r\n        this.removeSelectorParameter =  this.removeSelectorParameter.bind(this)\r\n        this.removeSelectorRule =       this.removeSelectorRule.bind(this)\r\n        this.changeRuleParameter =      this.changeRuleParameter.bind(this)\r\n        this.showPanel =                this.showPanel.bind(this)\r\n        this.changeRuleType =           this.changeRuleType.bind(this)\r\n        this.addRule =                  this.addRule.bind(this)\r\n        this.deleteRuleset =            this.deleteRuleset.bind(this)\r\n        this.addRuleset =               this.addRuleset.bind(this)\r\n        this.changeRuleset =            this.changeRuleset.bind(this)\r\n    }\r\n\r\n    // Sends modified ruleset to the host\r\n    updateData() {\r\n        this.props.updateRulesets(this.state.rulesets)\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: domain +\"/set_data\",\r\n            // Send sessionID, user token, and the encrypted rulesetand currentRuleset\r\n            data: JSON.stringify({ \r\n                sessionID: this.props.sessionID, \r\n                uid: getCookie(\"token\"), \r\n                rulesets: aesEncrypt(JSON.stringify(this.state.rulesets),this.props.secret),\r\n                currentRuleset: aesEncrypt(JSON.stringify(this.state.currentRuleset),this.props.secret)\r\n            }), \r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\"\r\n        });\r\n    }\r\n\r\n    // Shows the CalendarRules window and stores data needed for rule generation\r\n    show(rulesets, currentRuleset, days, types) {\r\n        this.setState({display: true, rulesets: rulesets, currentRuleset: currentRuleset, days: days, types: types})  \r\n    }\r\n\r\n    // Hides the CalendarRules window\r\n    hide() {\r\n        this.setState({display: false})\r\n    }\r\n\r\n    // Adds a new placeholder ruleset when triggered by the add ruleset button\r\n    addRuleset() {\r\n        var rulesets = this.state.rulesets\r\n        rulesets.push([\"placeholder\"])\r\n        this.setState({rulesets: rulesets, currentRuleset: rulesets.length-1}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Deletes the current ruleset\r\n    deleteRuleset() {\r\n        var rulesets = this.state.rulesets\r\n\r\n        rulesets.splice(this.state.currentRuleset, 1)   // Deletes the ruleset at the currentRuleset index\r\n\r\n        if (rulesets.length > 0) {  // If there is still more rulesets, just set currentRuleset to one less than before\r\n            this.setState({rulesets: rulesets, currentRuleset: this.state.currentRuleset-1}, () => {\r\n                this.updateData()\r\n            })\r\n        } else {                    // If there are no more rulesets, add an empty one and set currentRuleset to 0\r\n            rulesets.push([\"placeholder\"])\r\n            this.setState({rulesets: rulesets, currentRuleset: 0}, () => {\r\n                this.updateData()\r\n            })\r\n        }\r\n    }\r\n\r\n    // Triggers on selection of a new ruleset in the ruleset dropdown\r\n    changeRuleset(event) {\r\n        this.setState({currentRuleset: event.target.value}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggers on change from type to day or vice versa in a selector\r\n    selectorSelectChange(event) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        // Event.target.id refers to the number of selector\r\n        rulesets[this.state.currentRuleset][event.target.id].select = event.target.value\r\n        rulesets[this.state.currentRuleset][event.target.id].parameters = [\"\"]\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggers on change to a parameter in a selector, selectorNum is the # selector\r\n    selectorParameterChange(event, selectorNum) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        // The id is the index of the selector\r\n        rulesets[this.state.currentRuleset][selectorNum].parameters[event.target.id] = event.target.value\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggers on the plus button next to the parameters in a selector\r\n    addSelectorParameter(event) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        // Only adds selector if doing so wouldn't overflow the rule selector window\r\n        if (rulesets[this.state.currentRuleset][event.target.id].parameters.length <= Math.floor((event.target.parentNode.parentNode.offsetWidth - 350) / 100)) {\r\n            // If the first parameter is already all, then don't add a new parameter\r\n            if (rulesets[this.state.currentRuleset][event.target.id].parameters[0] != \"all\") {\r\n                rulesets[this.state.currentRuleset][event.target.id].parameters.push(\"\")\r\n            }\r\n        }\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggered on click of the minus button to the right of the selector parameters\r\n    removeSelectorParameter(event) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        // Only trigger if there are 2 or more parameters\r\n        if (rulesets[this.state.currentRuleset][event.target.id].parameters.length > 1) {\r\n            rulesets[this.state.currentRuleset][event.target.id].parameters.splice(-1,1)\r\n        }\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggers on click to the X button to the right of a rule\r\n    removeSelectorRule(event, selectorNum) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        rulesets[this.state.currentRuleset][selectorNum].rules.splice(event.target.id, 1)   // Deletes the rule\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Method triggered on change to any input field on a rule\r\n    changeRuleParameter(event, selectorNum, parameter) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        // Gets the new value of the field and uses the \"parameter\" parameter to identify the field in the data\r\n        rulesets[this.state.currentRuleset][selectorNum].rules[event.target.id].parameters[parameter] = event.target.value\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Triggered on change to the type of rule in the new rule, adjusts the data structure to match different rule types\r\n    changeRuleType(event, selectorNum) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        var selectorParameters = rulesets[this.state.currentRuleset][selectorNum].parameters\r\n        rulesets[this.state.currentRuleset][selectorNum].rules[event.target.id].rule = event.target.value\r\n\r\n        if (event.target.value == \"Total\") {            // Matches to the total rule\r\n            rulesets[this.state.currentRuleset][selectorNum].rules[event.target.id].parameters = {\r\n                \"condition\": \"\",\r\n                \"amount\": null,\r\n                \"category\": \"\",\r\n                \"for\": \"\"\r\n            }\r\n            \r\n        } else if (event.target.value == \"Repeats\") {   // Matches to the repeats rule\r\n            rulesets[this.state.currentRuleset][selectorNum].rules[event.target.id].parameters = {\r\n                \"amount\": null,\r\n                \"category\": \"\"\r\n            }\r\n        } else {                                        // Matches to the filter rule\r\n            rulesets[this.state.currentRuleset][selectorNum].rules[event.target.id].parameters = {\r\n                \"type\": \"\",\r\n                \"filter\": \"\"\r\n            }\r\n        }\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Returns the parameters for a specified selector\r\n    getSelectorParameters(selector, selectorNum) {\r\n        \r\n        // Add the options for the dropdowns\r\n        if (selector.select == \"type\") {        // If it is a type, add each of the calendar types\r\n            var options = this.state.types.map((type) => {\r\n                return (\r\n                    <option value={type}>{type}</option>\r\n                )\r\n            })\r\n\r\n            // Add all and empty options\r\n            options.unshift((<option value=\"all\">All</option>))\r\n            options.push((<option value=\"\" hidden></option>))\r\n        } else if (selector.select == \"day\") {  // If it is a day, add each of the calendar days that aren't deselected\r\n            var options = Object.keys(this.state.days).map((day) => {\r\n                if (this.state.days[day]) {\r\n                    return (\r\n                        <option value={day}>{day}</option>\r\n                    )\r\n                }\r\n            })\r\n\r\n            // Add all and empty options \r\n            options.unshift((<option value=\"all\">All</option>))\r\n            options.push((<option value=\"\" hidden></option>))\r\n        }\r\n        \r\n\r\n        var i = -1\r\n\r\n        // Iterate through parameter and get JSX\r\n        var parameters = selector.parameters.map((parameter) => {   \r\n            i++  \r\n            return (    // Select tag with the options defined above\r\n                <select class=\"selectorParameter\" id={i} value={parameter} onChange={(e) => this.selectorParameterChange(e, selectorNum)}>\r\n                    {options}\r\n                </select>\r\n            )\r\n        })\r\n\r\n        return parameters\r\n    }\r\n\r\n    // Triggered on the plus button on a rule input field\r\n    addRule(event, selectorNum) {\r\n        var rulesets = this.state.rulesets\r\n        var rule = rulesets[this.state.currentRuleset][selectorNum].rules[0]\r\n        var selectorParameters = rulesets[this.state.currentRuleset][selectorNum].parameters\r\n\r\n        if (!rule.rule) {   // If the rule doesn't have a defined rule type yet, don't add this rule\r\n            return\r\n        }\r\n\r\n        var parameters = rule.parameters\r\n\r\n        // Iterate through each parameterin the rules\r\n        for (var parameter of Object.keys(parameters)) {\r\n            if ((selectorParameters.includes(\"all\") || selectorParameters.length > 1) && selectorParameters) {  // If the selector is plural\r\n                if (parameter == \"for\" && parameters[parameter] == \"\") {    // If the for parameter is not present, then don't add this rule\r\n                    return\r\n                } \r\n            } else {    // If the selector is not plural\r\n                if (!parameters[parameter] && parameter != \"for\") {     // If the selector isn't the for parameter, check if its empty, if it is empty, don't add this rule\r\n                    return  \r\n                } else if (parameter == \"for\" && parameters[parameter] == \"\") {     // If the parameter is the for parameter and it is empty, set it to \"all\"\r\n                    rulesets[this.state.currentRuleset][selectorNum].rules[0].parameters.for = \"all\"\r\n                }\r\n            }\r\n        }\r\n\r\n        var newRule = rulesets[this.state.currentRuleset][selectorNum].rules[0]\r\n\r\n        newRule[\"new\"] = false                                                      // Designate the rule as no longer new\r\n        rulesets[this.state.currentRuleset][selectorNum].rules.splice(0, 1)         // Delete the new rule\r\n        rulesets[this.state.currentRuleset][selectorNum].rules.unshift(newRule)     // Take the previously new rule and add it the beginning of the list\r\n        rulesets[this.state.currentRuleset][selectorNum].rules.unshift({            // Add a new empty rule input field\r\n            \"new\": true,\r\n            \"rule\": \"\", \r\n            \"parameters\": {}\r\n        })\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Returns JSX of the rules for a specified selector\r\n    getRules(selector, selectorNum) {\r\n\r\n        // Generate the options for the category dropdown\r\n        var categoryOptions = [\"All\", \"Chicken\",\"Beef\",\"Salad\",\"Soup\",\"Stew\",\"Pasta\",\"Egg\",\"Pork\",\"Fish\",\"Sandwich\",\"Seafood\",\"Baked\",\"Fried\",\"Bread\",\"Pizza\"].map(category => {\r\n            return(<option value={category}/>)\r\n        })\r\n        categoryOptions.push(<option value=\"\" hidden/>)\r\n\r\n        var i = -1\r\n        // Generate each rule element\r\n        var rules = selector.rules.map((rule) => {\r\n            i++\r\n\r\n            // Get the rule parameters\r\n            var parameters = rule.parameters\r\n\r\n            if ((selector.parameters.includes(\"all\") || selector.parameters.length > 1) && parameters) {    // If there are multiple selector parameters, add the for (each/all) parameter\r\n                var forSelector = (\r\n                    <div class=\"forSelector\">\r\n                        <div style={{display: \"inline\"}}>for </div>\r\n                        <select value={parameters.for} class=\"forSelectorSelect\" id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"for\")}>\r\n                            <option value=\"\" selected disabled hidden></option>\r\n                            <option value=\"each\">each</option>\r\n                            <option value=\"all\">all</option>\r\n                        </select>\r\n                    </div>\r\n                )\r\n            } else {        // If there is just one selector parameter, don't show the for (each/all) option\r\n                var forSelector = (\r\n                    <div style={{display: \"none\"}}></div>\r\n                )\r\n            }\r\n            \r\n            var ruleName;\r\n            if (rule.new) { // If it is a new rule make the rulename a selector\r\n                ruleName = (\r\n                    <select class=\"selectSelector\" value={rule.rule} id={i} onChange={(e) => this.changeRuleType(e, selectorNum)}>\r\n                        <option value=\"\" selected disabled hidden></option>\r\n                        <option value=\"Total\">Total</option>\r\n                        <option value=\"Repeats\">Repeats</option>\r\n                        <option value=\"Filter\">Filter</option>\r\n                    </select>\r\n                )\r\n            } else {        // Otherwise just make it the name of the rule type\r\n                ruleName = rule.rule\r\n            }\r\n\r\n            var actionButton;\r\n            if (rule.new) {         // If the rule is new make the rightmost button an add rule button\r\n                actionButton = (\r\n                    <span class=\"plusiconrule\" id={i} onClick={(e) => this.addRule(e, selectorNum)}>+</span>\r\n                )\r\n            } else {                // Otherwise make it a remove rule button\r\n                actionButton = (    \r\n                    <span class=\"xicon\" id={i} onClick={(e) => this.removeSelectorRule(e, selectorNum)}>✕</span>\r\n                )\r\n            }\r\n\r\n            if (rule.rule == \"Total\") {      // If the rule is a \"total\" command\r\n                var category = capitalize(parameters.category)\r\n                return (\r\n                    <table class=\"rule\">\r\n                        <tr>\r\n                            <th class=\"ruleName\" style={{\"background-color\":\"red\"}}>\r\n                                {ruleName}\r\n                            </th>\r\n                            <th class=\"ruleParameters\">\r\n                                <select selected={parameters.condition} value={parameters.condition} class=\"ruleCondition\" id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"condition\")}>\r\n                                    <option value=\"\" selected disabled hidden></option>\r\n                                    <option value=\"at most\">At most</option>\r\n                                    <option value=\"exactly\">Exactly</option>\r\n                                    <option value=\"at least\">At least</option>\r\n                                </select>\r\n                                <input type=\"number\" min=\"0\" value={parameters.amount} id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"amount\")}></input>\r\n                                <input type=\"text\" list=\"categoryOptions\" class=\"catgeoryInput\" value={category} id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"category\")}/>\r\n                                <datalist id=\"categoryOptions\" >\r\n                                    {categoryOptions}\r\n                                </datalist>\r\n                                <div class=\"mealsText\">meals</div>\r\n                                {forSelector}\r\n                                {actionButton}\r\n                            </th>\r\n                        </tr>\r\n                    </table>\r\n                )\r\n            } else if (rule.rule == \"Filter\") {     // If the rule is a \"filter\" command\r\n                return (\r\n                    <table class=\"rule\">\r\n                        <tr>\r\n                            <th class=\"ruleName\" style={{\"background-color\":\"green\"}}>\r\n                                {ruleName}\r\n                            </th>\r\n                            <th class=\"ruleParameters\">\r\n                                <select value={parameters.type} class=\"ruleCondition\" id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"type\")}>\r\n                                    <option value=\"\" selected disabled hidden></option>\r\n                                    <option value=\"exclude\">Exclude</option>\r\n                                    <option value=\"apply\">Apply</option>\r\n                                </select>\r\n                                <input type=\"text\" class=\"filterInput\" value={parameters.filter} id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"filter\")}/>\r\n                                {actionButton}\r\n                            </th>\r\n                        </tr>\r\n                    </table>\r\n                )\r\n            } else if (rule.rule == \"Repeats\") {    // If the rule is a \"repeats\" command\r\n                var category = capitalize(parameters.category)\r\n                return (\r\n                    <table class=\"rule\">\r\n                        <tr>\r\n                            <th class=\"ruleName\" style={{\"background-color\":\"blue\"}}>\r\n                                {ruleName}\r\n                            </th>\r\n                            <th class=\"ruleParameters\">\r\n                                <div class=\"filterRuleText\">At most</div>\r\n                                <input type=\"number\" min=\"0\" value={parameters.amount} id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"amount\")}></input>\r\n                                <input type=\"text\" list=\"categoryOptions\" class=\"catgeoryInput\" value={category} id={i} onChange={(e) => this.changeRuleParameter(e, selectorNum, \"category\")}/>\r\n                                <datalist id=\"categoryOptions\">\r\n                                    {categoryOptions}\r\n                                </datalist>\r\n                                <div class=\"filterRuleText2\">meals in a row</div>\r\n                                {actionButton}\r\n                            </th>\r\n                        </tr>\r\n                    </table>\r\n                )\r\n            } else {                            // Otherwise display a empty new rule\r\n                return (\r\n                    <table class=\"rule\">\r\n                        <tr>\r\n                            <th class=\"ruleName\" style={{\"background-color\":\"#ccc\"}}>\r\n                                {ruleName}\r\n                            </th>\r\n                            <th class=\"ruleParameters\">\r\n                                {actionButton}\r\n                            </th>\r\n                        </tr>\r\n                    </table>\r\n                )\r\n            }\r\n        })\r\n\r\n        return rules\r\n    }\r\n\r\n    // Shows the rules under a selecotr on click\r\n    showPanel(event) {\r\n        if (event.target.className.includes(\"accordion\")) {\r\n\r\n            // Toggles css by changing class name\r\n            if (event.target.className === \"accordion\") {\r\n                event.target.className = \"accordion active\";\r\n            } else if (event.target.className === \"accordion active\"){\r\n                event.target.className = \"accordion\";\r\n            }\r\n    \r\n            var panel = event.target.nextElementSibling;\r\n            \r\n            // Toggles display of rules \r\n            if (panel.style.display === \"block\") {\r\n                panel.style.display = \"none\";\r\n            } else if (panel.style.display === \"none\" || !panel.style.display){\r\n                panel.style.display = \"block\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // Triggered on the X button to the right of a selector\r\n    removeSelector(event) {\r\n        var rulesets = this.state.rulesets\r\n\r\n        rulesets[this.state.currentRuleset].splice(event.target.id, 1)  // Deletes the selector\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Adds a empty selector when add selector button is pressed\r\n    addSelector() {\r\n        var rulesets = this.state.rulesets\r\n\r\n        // Create empty datastructure for the selector with an input field rule\r\n        rulesets[this.state.currentRuleset].push({\r\n            \"select\": \"\",\r\n            \"parameters\": [\"\"],\r\n            \"rules\": [\r\n                {\r\n                    \"new\": true,\r\n                    \"rule\": \"\", \r\n                    \"parameters\": {}\r\n                }\r\n            ]\r\n        })\r\n\r\n        if (rulesets[0] == \"placeholder\") {     // If there are placeholder selectors just remove them\r\n            rulesets = rulesets.splice(0,1)\r\n        }\r\n\r\n        this.setState({rulesets: rulesets}, () => {\r\n            this.updateData()\r\n        })\r\n    }\r\n\r\n    // Get each selector in the current ruleset\r\n    getSelectors() {\r\n        var selectors = []\r\n\r\n        // First check that the ruleset exists and there are selectors in it\r\n        if (this.state.rulesets.length > 0 && this.state.rulesets[this.state.currentRuleset]) {\r\n            var i = -1\r\n\r\n            // Iterate through each selector in the ruleset\r\n            for (var selector of this.state.rulesets[this.state.currentRuleset]) {\r\n                i++\r\n\r\n                if (selector != \"placeholder\") {    // If its not a placeholder selector then display\r\n\r\n                    var parameters = this.getSelectorParameters(selector, i)    // Get the JSX for the parameters in the selector\r\n    \r\n                    var rules = this.getRules(selector, i)                      // Get the JSX for the rules in the selector\r\n                    \r\n                    // Condition to check if adding a new selector would overflow the rule selector window\r\n                    var allowAdding = this.state.rulesets[this.state.currentRuleset][i].parameters.length <= Math.floor((window.innerWidth*0.7 - 350) / 100) && this.state.rulesets[this.state.currentRuleset][i].parameters[0] != \"all\"\r\n                    \r\n                    selectors.push(     // Format the selector component\r\n                        <div>\r\n                            <button class=\"accordionSelector\" onClick={this.showPanel}>\r\n                                <div class=\"selectorSection1\">\r\n                                    <span class=\"selectText\">Select</span>\r\n                                    <select id=\"select\" value={selector.select} id={i} onChange={this.selectorSelectChange} class=\"selectorParameter\">\r\n                                        <option value=\"\" selected disabled hidden></option>\r\n                                        <option value=\"type\">Type</option>\r\n                                        <option value=\"day\">Day</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class=\"selectorSection2\">\r\n                                    {parameters}\r\n                                    <span class=\"addParameter\" onClick={this.addSelectorParameter} id={i} style={allowAdding ? {color: \"green\"} : {color: \"gray\"}}>+</span>\r\n                                    <span class=\"removeParameter\" onClick={this.removeSelectorParameter} id={i} style={parameters.length > 1 ? {color: \"red\"} : {color: \"gray\"}}>-</span>\r\n                                </div>\r\n                                <span class=\"xicon\" id={i} onClick={this.removeSelector}>✕</span>\r\n                            </button>\r\n                            <div class=\"panel\" style={{\"padding-left\": \"0px\"}}>{rules}</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        if (selectors.length == 0) {    // If there are no selectors just add text saying that\r\n            selectors.push(\r\n                <div id=\"noIngredients\">\r\n                    <i style={{color: \"#ccc\"}}>There are no selectors here. Click \"Add Selectors\" to make new rules.</i>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return selectors\r\n    }\r\n\r\n    // Render function, triggered everytime their is a state change\r\n    render() {\r\n        var selectors = this.getSelectors()     // Gets the selector and the rules under them\r\n\r\n        var rulesetOptions = []\r\n        if (this.state.rulesets.length > 0) {   // If there are rules\r\n            var i = -1\r\n\r\n            // Iterate through each rule and add a new option to the ruleset dropdown\r\n            rulesetOptions = this.state.rulesets.map((ruleset) => {\r\n                i++\r\n    \r\n                return (\r\n                    <option value={i}>{\"Ruleset \" + (i+1)}</option>\r\n                )\r\n            })\r\n        }\r\n        \r\n\r\n        if (this.state.display) {   // If display is true display the calendar rules window over an overlay\r\n            return (    \r\n                <div>\r\n                    <div id=\"overlay\">\r\n                    </div>\r\n                    <div id=\"ruleEditor\" class=\"w3-card-4 w3-margin\">\r\n                        <div id=\"header\" style={{height: \"40px\", \"margin-bottom\":\"0px\"}}>\r\n                            <h3 style={{display: \"inline\"}}>Calendar Generation Rules</h3>\r\n                            <button class=\"exitRulesEditor\" onClick={this.hide}>✕</button>\r\n                        </div>\r\n                        <div id=\"rulesEditorBody\">\r\n                            {selectors}\r\n                        </div>\r\n                        <div id=\"footer\" style={{\"margin-top\":\"0px\"}}>\r\n                            <button id=\"addSelectorButton\" onClick={this.addSelector}>Add Selector</button>\r\n                            <button id=\"deleteRuleset\" onClick={this.deleteRuleset}>\r\n                                <img id=\"deleteRulesetIcon\" src={deleteRulesetIcon}></img>\r\n                            </button>\r\n                            <button id=\"addRuleset\" onClick={this.addRuleset}>\r\n                                <img id=\"addRulesetIcon\" src={addRulesetIcon}></img>\r\n                            </button>\r\n                            <select id=\"rulesetSelector\" value={this.state.currentRuleset} onChange={this.changeRuleset}>\r\n                                {rulesetOptions}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {                // Otherwise display nothing\r\n            return (\r\n                <div style={{display: \"none\"}}></div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default CalendarRules\r\n",{"ruleId":"290","severity":1,"message":"291","line":34,"column":10,"nodeType":"292","messageId":"293","endLine":34,"endColumn":19},{"ruleId":"294","severity":1,"message":"295","line":48,"column":24,"nodeType":"296","messageId":"297","endLine":48,"endColumn":26},{"ruleId":"294","severity":1,"message":"295","line":51,"column":25,"nodeType":"296","messageId":"297","endLine":51,"endColumn":27},{"ruleId":"294","severity":1,"message":"295","line":166,"column":34,"nodeType":"296","messageId":"297","endLine":166,"endColumn":36},{"ruleId":"294","severity":1,"message":"295","line":166,"column":73,"nodeType":"296","messageId":"297","endLine":166,"endColumn":75},{"ruleId":"294","severity":1,"message":"295","line":232,"column":41,"nodeType":"296","messageId":"297","endLine":232,"endColumn":43},{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","replacedBy":"301"},{"ruleId":"290","severity":1,"message":"302","line":10,"column":8,"nodeType":"292","messageId":"293","endLine":10,"endColumn":16},{"ruleId":"290","severity":1,"message":"303","line":45,"column":10,"nodeType":"292","messageId":"293","endLine":45,"endColumn":20},{"ruleId":"294","severity":1,"message":"295","line":103,"column":29,"nodeType":"296","messageId":"297","endLine":103,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":103,"column":64,"nodeType":"296","messageId":"297","endLine":103,"endColumn":66},{"ruleId":"294","severity":1,"message":"295","line":105,"column":36,"nodeType":"296","messageId":"297","endLine":105,"endColumn":38},{"ruleId":"294","severity":1,"message":"304","line":119,"column":22,"nodeType":"296","messageId":"297","endLine":119,"endColumn":24},{"ruleId":"294","severity":1,"message":"295","line":144,"column":29,"nodeType":"296","messageId":"297","endLine":144,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":146,"column":36,"nodeType":"296","messageId":"297","endLine":146,"endColumn":38},{"ruleId":"294","severity":1,"message":"295","line":148,"column":36,"nodeType":"296","messageId":"297","endLine":148,"endColumn":38},{"ruleId":"294","severity":1,"message":"295","line":150,"column":36,"nodeType":"296","messageId":"297","endLine":150,"endColumn":38},{"ruleId":"290","severity":1,"message":"302","line":14,"column":8,"nodeType":"292","messageId":"293","endLine":14,"endColumn":16},{"ruleId":"290","severity":1,"message":"305","line":30,"column":10,"nodeType":"292","messageId":"293","endLine":30,"endColumn":25},{"ruleId":"290","severity":1,"message":"306","line":30,"column":27,"nodeType":"292","messageId":"293","endLine":30,"endColumn":58},{"ruleId":"294","severity":1,"message":"295","line":42,"column":28,"nodeType":"296","messageId":"297","endLine":42,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":45,"column":29,"nodeType":"296","messageId":"297","endLine":45,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":196,"column":22,"nodeType":"296","messageId":"297","endLine":196,"endColumn":24},{"ruleId":"307","severity":1,"message":"308","line":219,"column":21,"nodeType":"292","messageId":"309","endLine":219,"endColumn":25},{"ruleId":"294","severity":1,"message":"295","line":222,"column":26,"nodeType":"296","messageId":"297","endLine":222,"endColumn":28},{"ruleId":"294","severity":1,"message":"295","line":224,"column":82,"nodeType":"296","messageId":"297","endLine":224,"endColumn":84},{"ruleId":"294","severity":1,"message":"295","line":279,"column":55,"nodeType":"296","messageId":"297","endLine":279,"endColumn":57},{"ruleId":"294","severity":1,"message":"295","line":290,"column":59,"nodeType":"296","messageId":"297","endLine":290,"endColumn":61},{"ruleId":"307","severity":1,"message":"310","line":363,"column":17,"nodeType":"292","messageId":"309","endLine":363,"endColumn":26},{"ruleId":"307","severity":1,"message":"311","line":366,"column":13,"nodeType":"292","messageId":"309","endLine":366,"endColumn":23},{"ruleId":"294","severity":1,"message":"295","line":407,"column":34,"nodeType":"296","messageId":"297","endLine":407,"endColumn":36},{"ruleId":"294","severity":1,"message":"295","line":410,"column":41,"nodeType":"296","messageId":"297","endLine":410,"endColumn":43},{"ruleId":"294","severity":1,"message":"295","line":413,"column":41,"nodeType":"296","messageId":"297","endLine":413,"endColumn":43},{"ruleId":"294","severity":1,"message":"304","line":419,"column":39,"nodeType":"296","messageId":"297","endLine":419,"endColumn":41},{"ruleId":"307","severity":1,"message":"310","line":441,"column":25,"nodeType":"292","messageId":"309","endLine":441,"endColumn":34},{"ruleId":"294","severity":1,"message":"295","line":447,"column":27,"nodeType":"296","messageId":"297","endLine":447,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":451,"column":27,"nodeType":"296","messageId":"297","endLine":451,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":486,"column":36,"nodeType":"296","messageId":"297","endLine":486,"endColumn":38},{"ruleId":"294","severity":1,"message":"304","line":499,"column":43,"nodeType":"296","messageId":"297","endLine":499,"endColumn":45},{"ruleId":"294","severity":1,"message":"295","line":656,"column":74,"nodeType":"296","messageId":"297","endLine":656,"endColumn":76},{"ruleId":"307","severity":1,"message":"312","line":696,"column":17,"nodeType":"292","messageId":"309","endLine":696,"endColumn":25},{"ruleId":"294","severity":1,"message":"304","line":723,"column":26,"nodeType":"296","messageId":"297","endLine":723,"endColumn":28},{"ruleId":"307","severity":1,"message":"313","line":751,"column":17,"nodeType":"292","messageId":"309","endLine":751,"endColumn":18},{"ruleId":"294","severity":1,"message":"304","line":755,"column":30,"nodeType":"296","messageId":"297","endLine":755,"endColumn":32},{"ruleId":"307","severity":1,"message":"314","line":767,"column":17,"nodeType":"292","messageId":"309","endLine":767,"endColumn":24},{"ruleId":"315","severity":1,"message":"316","line":774,"column":39,"nodeType":"317","endLine":774,"endColumn":60},{"ruleId":"307","severity":1,"message":"313","line":786,"column":17,"nodeType":"292","messageId":"309","endLine":786,"endColumn":18},{"ruleId":"294","severity":1,"message":"295","line":791,"column":40,"nodeType":"296","messageId":"297","endLine":791,"endColumn":42},{"ruleId":"318","severity":1,"message":"319","line":800,"column":153,"nodeType":"320","messageId":"321","endLine":800,"endColumn":155},{"ruleId":"294","severity":1,"message":"304","line":801,"column":38,"nodeType":"296","messageId":"297","endLine":801,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":825,"column":26,"nodeType":"296","messageId":"297","endLine":825,"endColumn":28},{"ruleId":"294","severity":1,"message":"295","line":825,"column":47,"nodeType":"296","messageId":"297","endLine":825,"endColumn":49},{"ruleId":"294","severity":1,"message":"295","line":825,"column":74,"nodeType":"296","messageId":"297","endLine":825,"endColumn":76},{"ruleId":"294","severity":1,"message":"295","line":826,"column":26,"nodeType":"296","messageId":"297","endLine":826,"endColumn":28},{"ruleId":"294","severity":1,"message":"295","line":826,"column":46,"nodeType":"296","messageId":"297","endLine":826,"endColumn":48},{"ruleId":"322","severity":1,"message":"323","line":858,"column":33,"nodeType":"324","endLine":858,"endColumn":111},{"ruleId":"322","severity":1,"message":"323","line":875,"column":29,"nodeType":"324","endLine":875,"endColumn":75},{"ruleId":"322","severity":1,"message":"323","line":878,"column":29,"nodeType":"324","endLine":878,"endColumn":79},{"ruleId":"322","severity":1,"message":"323","line":904,"column":25,"nodeType":"324","endLine":904,"endColumn":115},{"ruleId":"322","severity":1,"message":"323","line":906,"column":54,"nodeType":"324","endLine":906,"endColumn":115},{"ruleId":"290","severity":1,"message":"325","line":14,"column":17,"nodeType":"292","messageId":"293","endLine":14,"endColumn":32},{"ruleId":"290","severity":1,"message":"302","line":15,"column":8,"nodeType":"292","messageId":"293","endLine":15,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":47,"column":28,"nodeType":"296","messageId":"297","endLine":47,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":50,"column":29,"nodeType":"296","messageId":"297","endLine":50,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":148,"column":17,"nodeType":"292","messageId":"309","endLine":148,"endColumn":21},{"ruleId":"294","severity":1,"message":"295","line":211,"column":30,"nodeType":"296","messageId":"297","endLine":211,"endColumn":32},{"ruleId":"294","severity":1,"message":"295","line":211,"column":97,"nodeType":"296","messageId":"297","endLine":211,"endColumn":99},{"ruleId":"294","severity":1,"message":"295","line":273,"column":27,"nodeType":"296","messageId":"297","endLine":273,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":281,"column":41,"nodeType":"296","messageId":"297","endLine":281,"endColumn":43},{"ruleId":"294","severity":1,"message":"304","line":301,"column":138,"nodeType":"296","messageId":"297","endLine":301,"endColumn":140},{"ruleId":"294","severity":1,"message":"295","line":304,"column":43,"nodeType":"296","messageId":"297","endLine":304,"endColumn":45},{"ruleId":"294","severity":1,"message":"295","line":329,"column":25,"nodeType":"296","messageId":"297","endLine":329,"endColumn":27},{"ruleId":"294","severity":1,"message":"304","line":337,"column":130,"nodeType":"296","messageId":"297","endLine":337,"endColumn":132},{"ruleId":"294","severity":1,"message":"295","line":338,"column":48,"nodeType":"296","messageId":"297","endLine":338,"endColumn":50},{"ruleId":"307","severity":1,"message":"326","line":354,"column":11,"nodeType":"292","messageId":"309","endLine":354,"endColumn":18},{"ruleId":"294","severity":1,"message":"304","line":358,"column":134,"nodeType":"296","messageId":"297","endLine":358,"endColumn":136},{"ruleId":"294","severity":1,"message":"295","line":359,"column":48,"nodeType":"296","messageId":"297","endLine":359,"endColumn":50},{"ruleId":"294","severity":1,"message":"295","line":371,"column":87,"nodeType":"296","messageId":"297","endLine":371,"endColumn":89},{"ruleId":"294","severity":1,"message":"295","line":373,"column":42,"nodeType":"296","messageId":"297","endLine":373,"endColumn":44},{"ruleId":"294","severity":1,"message":"295","line":381,"column":42,"nodeType":"296","messageId":"297","endLine":381,"endColumn":44},{"ruleId":"307","severity":1,"message":"327","line":419,"column":11,"nodeType":"292","messageId":"309","endLine":419,"endColumn":19},{"ruleId":"294","severity":1,"message":"295","line":423,"column":31,"nodeType":"296","messageId":"297","endLine":423,"endColumn":33},{"ruleId":"294","severity":1,"message":"304","line":438,"column":44,"nodeType":"296","messageId":"297","endLine":438,"endColumn":46},{"ruleId":"294","severity":1,"message":"295","line":438,"column":84,"nodeType":"296","messageId":"297","endLine":438,"endColumn":86},{"ruleId":"328","severity":1,"message":"329","line":441,"column":39,"nodeType":"320","messageId":"330","endLine":449,"endColumn":14},{"ruleId":"294","severity":1,"message":"295","line":457,"column":27,"nodeType":"296","messageId":"297","endLine":457,"endColumn":29},{"ruleId":"328","severity":1,"message":"329","line":458,"column":52,"nodeType":"320","messageId":"330","endLine":466,"endColumn":18},{"ruleId":"294","severity":1,"message":"295","line":461,"column":44,"nodeType":"296","messageId":"297","endLine":461,"endColumn":46},{"ruleId":"294","severity":1,"message":"295","line":467,"column":34,"nodeType":"296","messageId":"297","endLine":467,"endColumn":36},{"ruleId":"328","severity":1,"message":"331","line":475,"column":50,"nodeType":"320","messageId":"330","endLine":492,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":479,"column":49,"nodeType":"296","messageId":"297","endLine":479,"endColumn":51},{"ruleId":"294","severity":1,"message":"295","line":480,"column":41,"nodeType":"296","messageId":"297","endLine":480,"endColumn":43},{"ruleId":"294","severity":1,"message":"295","line":493,"column":34,"nodeType":"296","messageId":"297","endLine":493,"endColumn":36},{"ruleId":"328","severity":1,"message":"332","line":497,"column":50,"nodeType":"320","messageId":"330","endLine":505,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":500,"column":46,"nodeType":"296","messageId":"297","endLine":500,"endColumn":48},{"ruleId":"294","severity":1,"message":"304","line":537,"column":93,"nodeType":"296","messageId":"297","endLine":537,"endColumn":95},{"ruleId":"294","severity":1,"message":"304","line":550,"column":45,"nodeType":"296","messageId":"297","endLine":550,"endColumn":47},{"ruleId":"294","severity":1,"message":"295","line":560,"column":46,"nodeType":"296","messageId":"297","endLine":560,"endColumn":48},{"ruleId":"294","severity":1,"message":"295","line":565,"column":75,"nodeType":"296","messageId":"297","endLine":565,"endColumn":77},{"ruleId":"307","severity":1,"message":"333","line":571,"column":17,"nodeType":"292","messageId":"309","endLine":571,"endColumn":25},{"ruleId":"307","severity":1,"message":"334","line":572,"column":17,"nodeType":"292","messageId":"309","endLine":572,"endColumn":21},{"ruleId":"294","severity":1,"message":"304","line":582,"column":43,"nodeType":"296","messageId":"297","endLine":582,"endColumn":45},{"ruleId":"294","severity":1,"message":"295","line":590,"column":44,"nodeType":"296","messageId":"297","endLine":590,"endColumn":46},{"ruleId":"335","severity":1,"message":"336","line":622,"column":19,"nodeType":"292","messageId":"337","endLine":622,"endColumn":20},{"ruleId":"307","severity":1,"message":"334","line":628,"column":17,"nodeType":"292","messageId":"309","endLine":628,"endColumn":21},{"ruleId":"338","severity":1,"message":"339","line":645,"column":87,"nodeType":"317","endLine":645,"endColumn":102},{"ruleId":"322","severity":1,"message":"323","line":652,"column":17,"nodeType":"324","endLine":652,"endColumn":169},{"ruleId":"335","severity":1,"message":"336","line":713,"column":19,"nodeType":"292","messageId":"337","endLine":713,"endColumn":20},{"ruleId":"307","severity":1,"message":"334","line":719,"column":17,"nodeType":"292","messageId":"309","endLine":719,"endColumn":21},{"ruleId":"294","severity":1,"message":"304","line":733,"column":87,"nodeType":"296","messageId":"297","endLine":733,"endColumn":89},{"ruleId":"322","severity":1,"message":"323","line":736,"column":17,"nodeType":"324","endLine":736,"endColumn":85},{"ruleId":"338","severity":1,"message":"339","line":737,"column":75,"nodeType":"317","endLine":737,"endColumn":90},{"ruleId":"322","severity":1,"message":"323","line":739,"column":17,"nodeType":"324","endLine":739,"endColumn":118},{"ruleId":"322","severity":1,"message":"323","line":740,"column":17,"nodeType":"324","endLine":740,"endColumn":73},{"ruleId":"322","severity":1,"message":"323","line":747,"column":17,"nodeType":"324","endLine":747,"endColumn":211},{"ruleId":"322","severity":1,"message":"323","line":760,"column":15,"nodeType":"324","endLine":760,"endColumn":110},{"ruleId":"322","severity":1,"message":"323","line":761,"column":15,"nodeType":"324","endLine":761,"endColumn":71},{"ruleId":"322","severity":1,"message":"323","line":769,"column":15,"nodeType":"324","endLine":769,"endColumn":73},{"ruleId":"322","severity":1,"message":"323","line":770,"column":15,"nodeType":"324","endLine":770,"endColumn":71},{"ruleId":"294","severity":1,"message":"304","line":829,"column":37,"nodeType":"296","messageId":"297","endLine":829,"endColumn":39},{"ruleId":"294","severity":1,"message":"295","line":838,"column":38,"nodeType":"296","messageId":"297","endLine":838,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":878,"column":22,"nodeType":"296","messageId":"297","endLine":878,"endColumn":24},{"ruleId":"294","severity":1,"message":"304","line":883,"column":33,"nodeType":"296","messageId":"297","endLine":883,"endColumn":35},{"ruleId":"294","severity":1,"message":"304","line":919,"column":33,"nodeType":"296","messageId":"297","endLine":919,"endColumn":35},{"ruleId":"290","severity":1,"message":"340","line":936,"column":11,"nodeType":"292","messageId":"293","endLine":936,"endColumn":17},{"ruleId":"290","severity":1,"message":"340","line":970,"column":11,"nodeType":"292","messageId":"293","endLine":970,"endColumn":17},{"ruleId":"294","severity":1,"message":"304","line":1060,"column":39,"nodeType":"296","messageId":"297","endLine":1060,"endColumn":41},{"ruleId":"322","severity":1,"message":"323","line":1115,"column":96,"nodeType":"324","endLine":1115,"endColumn":131},{"ruleId":"322","severity":1,"message":"323","line":1118,"column":86,"nodeType":"324","endLine":1118,"endColumn":145},{"ruleId":"322","severity":1,"message":"323","line":1142,"column":72,"nodeType":"324","endLine":1142,"endColumn":106},{"ruleId":"322","severity":1,"message":"323","line":1143,"column":104,"nodeType":"324","endLine":1143,"endColumn":142},{"ruleId":"322","severity":1,"message":"323","line":1144,"column":68,"nodeType":"324","endLine":1144,"endColumn":112},{"ruleId":"290","severity":1,"message":"302","line":9,"column":8,"nodeType":"292","messageId":"293","endLine":9,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":33,"column":78,"nodeType":"296","messageId":"297","endLine":33,"endColumn":80},{"ruleId":"322","severity":1,"message":"323","line":35,"column":13,"nodeType":"324","endLine":35,"endColumn":82},{"ruleId":"338","severity":1,"message":"339","line":36,"column":60,"nodeType":"317","endLine":36,"endColumn":75},{"ruleId":"298","replacedBy":"341"},{"ruleId":"300","replacedBy":"342"},{"ruleId":"290","severity":1,"message":"302","line":10,"column":8,"nodeType":"292","messageId":"293","endLine":10,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":27,"column":45,"nodeType":"296","messageId":"297","endLine":27,"endColumn":47},{"ruleId":"294","severity":1,"message":"295","line":37,"column":28,"nodeType":"296","messageId":"297","endLine":37,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":40,"column":29,"nodeType":"296","messageId":"297","endLine":40,"endColumn":31},{"ruleId":"290","severity":1,"message":"303","line":74,"column":10,"nodeType":"292","messageId":"293","endLine":74,"endColumn":20},{"ruleId":"294","severity":1,"message":"295","line":123,"column":33,"nodeType":"296","messageId":"297","endLine":123,"endColumn":35},{"ruleId":"294","severity":1,"message":"295","line":139,"column":32,"nodeType":"296","messageId":"297","endLine":139,"endColumn":34},{"ruleId":"307","severity":1,"message":"343","line":159,"column":17,"nodeType":"292","messageId":"309","endLine":159,"endColumn":29},{"ruleId":"307","severity":1,"message":"344","line":160,"column":17,"nodeType":"292","messageId":"309","endLine":160,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":241,"column":34,"nodeType":"296","messageId":"297","endLine":241,"endColumn":36},{"ruleId":"294","severity":1,"message":"295","line":244,"column":41,"nodeType":"296","messageId":"297","endLine":244,"endColumn":43},{"ruleId":"294","severity":1,"message":"295","line":247,"column":41,"nodeType":"296","messageId":"297","endLine":247,"endColumn":43},{"ruleId":"294","severity":1,"message":"304","line":253,"column":39,"nodeType":"296","messageId":"297","endLine":253,"endColumn":41},{"ruleId":"307","severity":1,"message":"310","line":275,"column":25,"nodeType":"292","messageId":"309","endLine":275,"endColumn":34},{"ruleId":"294","severity":1,"message":"295","line":281,"column":27,"nodeType":"296","messageId":"297","endLine":281,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":285,"column":27,"nodeType":"296","messageId":"297","endLine":285,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":353,"column":33,"nodeType":"296","messageId":"297","endLine":353,"endColumn":35},{"ruleId":"294","severity":1,"message":"295","line":371,"column":32,"nodeType":"296","messageId":"297","endLine":371,"endColumn":34},{"ruleId":"322","severity":1,"message":"323","line":390,"column":88,"nodeType":"324","endLine":390,"endColumn":126},{"ruleId":"322","severity":1,"message":"323","line":391,"column":84,"nodeType":"324","endLine":391,"endColumn":126},{"ruleId":"290","severity":1,"message":"302","line":11,"column":8,"nodeType":"292","messageId":"293","endLine":11,"endColumn":16},{"ruleId":"290","severity":1,"message":"345","line":16,"column":8,"nodeType":"292","messageId":"293","endLine":16,"endColumn":18},{"ruleId":"294","severity":1,"message":"295","line":97,"column":91,"nodeType":"296","messageId":"297","endLine":97,"endColumn":93},{"ruleId":"307","severity":1,"message":"346","line":110,"column":21,"nodeType":"292","messageId":"309","endLine":110,"endColumn":36},{"ruleId":"294","severity":1,"message":"295","line":112,"column":31,"nodeType":"296","messageId":"297","endLine":112,"endColumn":33},{"ruleId":"294","severity":1,"message":"295","line":112,"column":57,"nodeType":"296","messageId":"297","endLine":112,"endColumn":59},{"ruleId":"294","severity":1,"message":"295","line":112,"column":89,"nodeType":"296","messageId":"297","endLine":112,"endColumn":91},{"ruleId":"294","severity":1,"message":"295","line":114,"column":38,"nodeType":"296","messageId":"297","endLine":114,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":114,"column":68,"nodeType":"296","messageId":"297","endLine":114,"endColumn":70},{"ruleId":"322","severity":1,"message":"323","line":133,"column":95,"nodeType":"324","endLine":133,"endColumn":133},{"ruleId":"290","severity":1,"message":"347","line":15,"column":10,"nodeType":"292","messageId":"293","endLine":15,"endColumn":15},{"ruleId":"290","severity":1,"message":"348","line":15,"column":17,"nodeType":"292","messageId":"293","endLine":15,"endColumn":23},{"ruleId":"290","severity":1,"message":"349","line":15,"column":25,"nodeType":"292","messageId":"293","endLine":15,"endColumn":31},{"ruleId":"290","severity":1,"message":"350","line":15,"column":33,"nodeType":"292","messageId":"293","endLine":15,"endColumn":44},{"ruleId":"290","severity":1,"message":"351","line":15,"column":46,"nodeType":"292","messageId":"293","endLine":15,"endColumn":51},{"ruleId":"290","severity":1,"message":"352","line":17,"column":10,"nodeType":"292","messageId":"293","endLine":17,"endColumn":21},{"ruleId":"353","severity":1,"message":"354","line":35,"column":31,"nodeType":"296","messageId":"355","endLine":35,"endColumn":32},{"ruleId":"353","severity":1,"message":"354","line":38,"column":22,"nodeType":"296","messageId":"355","endLine":38,"endColumn":23},{"ruleId":"356","severity":1,"message":"357","line":135,"column":9,"nodeType":"358","endLine":135,"endColumn":19},{"ruleId":"294","severity":1,"message":"295","line":158,"column":38,"nodeType":"296","messageId":"297","endLine":158,"endColumn":40},{"ruleId":"290","severity":1,"message":"302","line":10,"column":8,"nodeType":"292","messageId":"293","endLine":10,"endColumn":16},{"ruleId":"290","severity":1,"message":"359","line":15,"column":10,"nodeType":"292","messageId":"293","endLine":15,"endColumn":15},{"ruleId":"322","severity":1,"message":"323","line":62,"column":21,"nodeType":"324","endLine":62,"endColumn":71},{"ruleId":"290","severity":1,"message":"302","line":12,"column":8,"nodeType":"292","messageId":"293","endLine":12,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":30,"column":26,"nodeType":"296","messageId":"297","endLine":30,"endColumn":28},{"ruleId":"294","severity":1,"message":"295","line":33,"column":27,"nodeType":"296","messageId":"297","endLine":33,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":55,"column":38,"nodeType":"296","messageId":"297","endLine":55,"endColumn":40},{"ruleId":"290","severity":1,"message":"302","line":3,"column":8,"nodeType":"292","messageId":"293","endLine":3,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":25,"column":21,"nodeType":"296","messageId":"297","endLine":25,"endColumn":23},{"ruleId":"294","severity":1,"message":"295","line":64,"column":24,"nodeType":"296","messageId":"297","endLine":64,"endColumn":26},{"ruleId":"360","severity":1,"message":"361","line":77,"column":40,"nodeType":"362","messageId":"363","endLine":77,"endColumn":41,"suggestions":"364"},{"ruleId":"307","severity":1,"message":"365","line":87,"column":9,"nodeType":"292","messageId":"309","endLine":87,"endColumn":19},{"ruleId":"294","severity":1,"message":"295","line":94,"column":111,"nodeType":"296","messageId":"297","endLine":94,"endColumn":113},{"ruleId":"294","severity":1,"message":"304","line":97,"column":61,"nodeType":"296","messageId":"297","endLine":97,"endColumn":63},{"ruleId":"294","severity":1,"message":"295","line":186,"column":34,"nodeType":"296","messageId":"297","endLine":186,"endColumn":36},{"ruleId":"294","severity":1,"message":"304","line":206,"column":44,"nodeType":"296","messageId":"297","endLine":206,"endColumn":46},{"ruleId":"307","severity":1,"message":"366","line":212,"column":29,"nodeType":"292","messageId":"309","endLine":212,"endColumn":42},{"ruleId":"307","severity":1,"message":"313","line":214,"column":29,"nodeType":"292","messageId":"309","endLine":214,"endColumn":30},{"ruleId":"294","severity":1,"message":"304","line":238,"column":17,"nodeType":"296","messageId":"297","endLine":238,"endColumn":19},{"ruleId":"290","severity":1,"message":"302","line":11,"column":8,"nodeType":"292","messageId":"293","endLine":11,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":32,"column":28,"nodeType":"296","messageId":"297","endLine":32,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":35,"column":29,"nodeType":"296","messageId":"297","endLine":35,"endColumn":31},{"ruleId":"294","severity":1,"message":"304","line":202,"column":84,"nodeType":"296","messageId":"297","endLine":202,"endColumn":86},{"ruleId":"290","severity":1,"message":"367","line":253,"column":13,"nodeType":"292","messageId":"293","endLine":253,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":256,"column":32,"nodeType":"296","messageId":"297","endLine":256,"endColumn":34},{"ruleId":"294","severity":1,"message":"295","line":264,"column":39,"nodeType":"296","messageId":"297","endLine":264,"endColumn":41},{"ruleId":"294","severity":1,"message":"295","line":285,"column":29,"nodeType":"296","messageId":"297","endLine":285,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":295,"column":36,"nodeType":"296","messageId":"297","endLine":295,"endColumn":38},{"ruleId":"307","severity":1,"message":"314","line":296,"column":17,"nodeType":"292","messageId":"309","endLine":296,"endColumn":24},{"ruleId":"318","severity":1,"message":"319","line":296,"column":66,"nodeType":"320","messageId":"321","endLine":296,"endColumn":68},{"ruleId":"294","severity":1,"message":"295","line":340,"column":31,"nodeType":"296","messageId":"297","endLine":340,"endColumn":33},{"ruleId":"294","severity":1,"message":"295","line":340,"column":65,"nodeType":"296","messageId":"297","endLine":340,"endColumn":67},{"ruleId":"294","severity":1,"message":"304","line":344,"column":57,"nodeType":"296","messageId":"297","endLine":344,"endColumn":59},{"ruleId":"294","severity":1,"message":"295","line":346,"column":38,"nodeType":"296","messageId":"297","endLine":346,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":346,"column":72,"nodeType":"296","messageId":"297","endLine":346,"endColumn":74},{"ruleId":"307","severity":1,"message":"368","line":397,"column":21,"nodeType":"292","messageId":"309","endLine":397,"endColumn":32},{"ruleId":"294","severity":1,"message":"295","line":427,"column":27,"nodeType":"296","messageId":"297","endLine":427,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":454,"column":34,"nodeType":"296","messageId":"297","endLine":454,"endColumn":36},{"ruleId":"294","severity":1,"message":"295","line":473,"column":34,"nodeType":"296","messageId":"297","endLine":473,"endColumn":36},{"ruleId":"307","severity":1,"message":"369","line":474,"column":21,"nodeType":"292","messageId":"309","endLine":474,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":563,"column":25,"nodeType":"296","messageId":"297","endLine":563,"endColumn":27},{"ruleId":"294","severity":1,"message":"304","line":584,"column":30,"nodeType":"296","messageId":"297","endLine":584,"endColumn":32},{"ruleId":"294","severity":1,"message":"304","line":591,"column":225,"nodeType":"296","messageId":"297","endLine":591,"endColumn":227},{"ruleId":"315","severity":1,"message":"316","line":598,"column":81,"nodeType":"317","endLine":598,"endColumn":87},{"ruleId":"294","severity":1,"message":"295","line":618,"column":30,"nodeType":"296","messageId":"297","endLine":618,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":664,"column":33,"nodeType":"324","endLine":664,"endColumn":85},{"ruleId":"322","severity":1,"message":"323","line":667,"column":33,"nodeType":"324","endLine":667,"endColumn":79},"no-unused-vars","'setCookie' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["370"],"no-negated-in-lhs",["371"],"'ReactDOM' is defined but never used.","'aesDecrypt' is defined but never used.","Expected '!==' and instead saw '!='.","'rightArithShift' is defined but never used.","'thomsonCrossSectionDependencies' is defined but never used.","no-redeclare","'data' is already defined.","redeclared","'specifier' is already defined.","'ingredient' is already defined.","'servings' is already defined.","'i' is already defined.","'options' is already defined.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useLayoutEffect' is defined but never used.","'repeats' is already defined.","'selector' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'rule', 'rule'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'selectorIsPlural', 'rule', 'rule', 'totalEach', 'rule', 'totalEach', 'rule', 'total', 'rule', 'total'.","Function declared in a loop contains unsafe references to variable(s) 'rule', 'rule', 'repeats'.","'mealname' is already defined.","'meal' is already defined.","no-use-before-define","'i' was used before it was defined.","usedBeforeDefined","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'target' is assigned a value but never used.",["370"],["371"],"'ingredients1' is already defined.","'ingredients2' is already defined.","'exportIcon' is defined but never used.","'nutritionNumber' is already defined.","'toPng' is defined but never used.","'toJpeg' is defined but never used.","'toBlob' is defined but never used.","'toPixelData' is defined but never used.","'toSvg' is defined but never used.","'hiddenClone' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'floor' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["372","373"],"'categories' is already defined.","'specifierData' is already defined.","'selectorParameters' is assigned a value but never used.","'forSelector' is already defined.","'category' is already defined.","no-global-assign","no-unsafe-negation",{"messageId":"374","fix":"375","desc":"376"},{"messageId":"377","fix":"378","desc":"379"},"removeEscape",{"range":"380","text":"381"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"382","text":"383"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[3181,3182],"",[3181,3181],"\\"]